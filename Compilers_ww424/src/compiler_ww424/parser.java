
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package compiler_ww424;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import compiler_ww424.Lexer.Token;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\007\004\000\002\004\004" +
    "\000\002\004\002\000\002\010\010\000\002\012\005\000" +
    "\002\012\003\000\002\012\002\000\002\011\005\000\002" +
    "\013\004\000\002\013\005\000\002\013\002\000\002\014" +
    "\006\000\002\014\003\000\002\015\004\000\002\015\005" +
    "\000\002\015\002\000\002\016\003\000\002\016\003\000" +
    "\002\016\007\000\002\016\006\000\002\016\003\000\002" +
    "\033\003\000\002\033\005\000\002\033\002\000\002\031" +
    "\007\000\002\032\011\000\002\017\003\000\002\017\005" +
    "\000\002\021\003\000\002\021\005\000\002\021\005\000" +
    "\002\021\007\000\002\021\003\000\002\021\005\000\002" +
    "\005\003\000\002\005\003\000\002\005\006\000\002\005" +
    "\005\000\002\006\003\000\002\006\006\000\002\006\005" +
    "\000\002\022\004\000\002\022\005\000\002\022\002\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\006\000\002\023" +
    "\005\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\026\006\000" +
    "\002\030\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\025\004\000\002" +
    "\025\004" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\010\002\ufffe\004\ufffe\020\ufffe\001\002\000" +
    "\004\002\212\001\002\000\010\002\ufffb\004\ufffb\020\007" +
    "\001\002\000\010\002\uffff\004\uffff\020\uffff\001\002\000" +
    "\004\004\211\001\002\000\006\002\000\004\012\001\002" +
    "\000\006\002\ufffc\004\ufffc\001\002\000\004\043\013\001" +
    "\002\000\010\004\016\044\ufff7\050\ufff7\001\002\000\006" +
    "\044\127\050\126\001\002\000\006\044\ufff8\050\ufff8\001" +
    "\002\000\004\047\017\001\002\000\006\012\022\013\021" +
    "\001\002\000\010\041\023\044\ufff6\050\ufff6\001\002\000" +
    "\036\002\uffda\004\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\037\uffda\041\uffda\044\uffda\045\uffda\046\uffda\050\uffda\051" +
    "\uffda\052\uffda\001\002\000\036\002\uffdb\004\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\037\uffdb\041\uffdb\044\uffdb\045" +
    "\uffdb\046\uffdb\050\uffdb\051\uffdb\052\uffdb\001\002\000\032" +
    "\004\042\005\036\006\040\007\045\010\031\011\041\021" +
    "\027\023\033\027\035\042\032\043\030\045\044\001\002" +
    "\000\066\002\uffc8\004\uffc8\014\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\040" +
    "\uffc8\042\uffc8\044\uffc8\046\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\001\002\000\066\002\uffc7\004\uffc7\014\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\040\uffc7\042\uffc7\044\uffc7\046\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\001\002\000\070\002\uffca\004" +
    "\uffca\014\uffca\015\uffca\016\uffca\017\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\030\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\040\uffca\041\122\042\uffca" +
    "\044\uffca\046\uffca\050\uffca\051\uffca\052\uffca\053\uffca\001" +
    "\002\000\004\043\117\001\002\000\030\004\042\005\036" +
    "\006\040\007\045\010\031\011\041\021\027\023\033\027" +
    "\035\043\030\045\044\001\002\000\066\002\uffce\004\uffce" +
    "\014\uffce\015\uffce\016\uffce\017\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\040\uffce\042\uffce\044\uffce\046" +
    "\uffce\050\uffce\051\uffce\052\uffce\053\uffce\001\002\000\036" +
    "\002\uffd8\004\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\037" +
    "\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\001\002\000\030\004\042\005\036\006\040\007" +
    "\045\010\031\011\041\021\027\023\033\027\035\043\030" +
    "\045\044\001\002\000\066\002\uffc6\004\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\040\uffc6\042\uffc6\044\uffc6\046\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\053\uffc6\001\002\000\030\004\042\005" +
    "\036\006\040\007\045\010\031\011\041\021\027\023\033" +
    "\027\035\043\030\045\044\001\002\000\066\002\uffd0\004" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\040\uffd0\042\uffd0\044\uffd0" +
    "\046\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\001\002\000" +
    "\040\022\065\023\054\024\052\025\056\026\050\030\055" +
    "\031\062\032\053\033\057\034\061\035\060\036\051\040" +
    "\063\042\112\053\064\001\002\000\066\002\uffcf\004\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\017\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\040\uffcf\042\uffcf\044\uffcf\046" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\001\002\000\066" +
    "\002\uffcd\004\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd\042" +
    "\uffcd\044\uffcd\046\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\001\002\000\072\002\uffd7\004\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\107\044\uffd7\046\uffd7" +
    "\050\uffd7\051\uffd7\052\uffd7\053\uffd7\001\002\000\066\002" +
    "\uffc9\004\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\040\uffc9\042\uffc9" +
    "\044\uffc9\046\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\001" +
    "\002\000\034\004\042\005\036\006\040\007\045\010\031" +
    "\011\041\021\027\023\033\027\035\043\030\045\044\046" +
    "\uffe6\050\uffe6\001\002\000\066\002\uffd1\004\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\040\uffd1\042\uffd1\044\uffd1\046\uffd1\050" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\001\002\000\006\046\105" +
    "\050\104\001\002\000\046\022\065\023\054\024\052\025" +
    "\056\026\050\030\055\031\062\032\053\033\057\034\061" +
    "\035\060\036\051\040\063\044\uffe8\046\uffe8\050\uffe8\051" +
    "\uffe8\053\064\001\002\000\030\004\042\005\036\006\040" +
    "\007\045\010\031\011\041\021\027\023\033\027\035\043" +
    "\030\045\044\001\002\000\030\004\042\005\036\006\040" +
    "\007\045\010\031\011\041\021\027\023\033\027\035\043" +
    "\030\045\044\001\002\000\030\004\042\005\036\006\040" +
    "\007\045\010\031\011\041\021\027\023\033\027\035\043" +
    "\030\045\044\001\002\000\030\004\042\005\036\006\040" +
    "\007\045\010\031\011\041\021\027\023\033\027\035\043" +
    "\030\045\044\001\002\000\030\004\042\005\036\006\040" +
    "\007\045\010\031\011\041\021\027\023\033\027\035\043" +
    "\030\045\044\001\002\000\030\004\042\005\036\006\040" +
    "\007\045\010\031\011\041\021\027\023\033\027\035\043" +
    "\030\045\044\001\002\000\030\004\042\005\036\006\040" +
    "\007\045\010\031\011\041\021\027\023\033\027\035\043" +
    "\030\045\044\001\002\000\030\004\042\005\036\006\040" +
    "\007\045\010\031\011\041\021\027\023\033\027\035\043" +
    "\030\045\044\001\002\000\030\004\042\005\036\006\040" +
    "\007\045\010\031\011\041\021\027\023\033\027\035\043" +
    "\030\045\044\001\002\000\030\004\042\005\036\006\040" +
    "\007\045\010\031\011\041\021\027\023\033\027\035\043" +
    "\030\045\044\001\002\000\030\004\042\005\036\006\040" +
    "\007\045\010\031\011\041\021\027\023\033\027\035\043" +
    "\030\045\044\001\002\000\030\004\042\005\036\006\040" +
    "\007\045\010\031\011\041\021\027\023\033\027\035\043" +
    "\030\045\044\001\002\000\030\004\042\005\036\006\040" +
    "\007\045\010\031\011\041\021\027\023\033\027\035\043" +
    "\030\045\044\001\002\000\030\004\042\005\036\006\040" +
    "\007\045\010\031\011\041\021\027\023\033\027\035\043" +
    "\030\045\044\001\002\000\066\002\uffc3\004\uffc3\014\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\022\uffc3\023\uffc3\024\052\025" +
    "\056\026\050\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\040\uffc3\042\uffc3\044\uffc3\046\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\053\064\001\002\000\066\002\uffb6" +
    "\004\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\022\uffb6\023" +
    "\uffb6\024\052\025\056\026\050\030\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\036\uffb6\040\uffb6\042\uffb6\044" +
    "\uffb6\046\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\001\002" +
    "\000\066\002\uffb9\004\uffb9\014\uffb9\015\uffb9\016\uffb9\017" +
    "\uffb9\022\065\023\054\024\052\025\056\026\050\030\uffb9" +
    "\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\040" +
    "\uffb9\042\uffb9\044\uffb9\046\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\053\064\001\002\000\066\002\uffbc\004\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\022\065\023\054\024\052\025\056" +
    "\026\050\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\040\uffbc\042\uffbc\044\uffbc\046\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\064\001\002\000\066\002\uffba\004" +
    "\uffba\014\uffba\015\uffba\016\uffba\017\uffba\022\065\023\054" +
    "\024\052\025\056\026\050\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\040\uffba\042\uffba\044\uffba" +
    "\046\uffba\050\uffba\051\uffba\052\uffba\053\064\001\002\000" +
    "\066\002\uffb8\004\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\022\065\023\054\024\052\025\056\026\050\030\055\031" +
    "\062\032\053\033\057\034\061\035\uffb8\036\uffb8\040\063" +
    "\042\uffb8\044\uffb8\046\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\064\001\002\000\066\002\uffbb\004\uffbb\014\uffbb\015\uffbb" +
    "\016\uffbb\017\uffbb\022\065\023\054\024\052\025\056\026" +
    "\050\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\040\uffbb\042\uffbb\044\uffbb\046\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\064\001\002\000\066\002\uffc0\004\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\040\uffc0\042\uffc0\044\uffc0\046" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\001\002\000\066" +
    "\002\uffbe\004\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\022" +
    "\065\023\054\024\052\025\056\026\050\030\uffbe\031\uffbe" +
    "\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\040\uffbe\042" +
    "\uffbe\044\uffbe\046\uffbe\050\uffbe\051\uffbe\052\uffbe\053\064" +
    "\001\002\000\066\002\uffc2\004\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\022\uffc2\023\uffc2\024\052\025\056\026\050" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\040\uffc2\042\uffc2\044\uffc2\046\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\053\064\001\002\000\066\002\uffbd\004\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\022\065\023\054\024\052" +
    "\025\056\026\050\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\040\uffbd\042\uffbd\044\uffbd\046\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\053\064\001\002\000\066\002" +
    "\uffc1\004\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\040\uffc1\042\uffc1" +
    "\044\uffc1\046\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\001" +
    "\002\000\066\002\uffb7\004\uffb7\014\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\022\065\023\054\024\052\025\056\026\050\030" +
    "\055\031\062\032\053\033\057\034\061\035\060\036\uffb7" +
    "\040\063\042\uffb7\044\uffb7\046\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\053\064\001\002\000\066\002\uffbf\004\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\040\uffbf\042\uffbf\044\uffbf\046\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\001\002\000\030\004\042" +
    "\005\036\006\040\007\045\010\031\011\041\021\027\023" +
    "\033\027\035\043\030\045\044\001\002\000\066\002\uffc4" +
    "\004\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\040\uffc4\042\uffc4\044" +
    "\uffc4\046\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\001\002" +
    "\000\046\022\065\023\054\024\052\025\056\026\050\030" +
    "\055\031\062\032\053\033\057\034\061\035\060\036\051" +
    "\040\063\044\uffe7\046\uffe7\050\uffe7\051\uffe7\053\064\001" +
    "\002\000\034\004\042\005\036\006\040\007\045\010\031" +
    "\011\041\021\027\023\033\027\035\043\030\044\uffe6\045" +
    "\044\050\uffe6\001\002\000\006\044\111\050\104\001\002" +
    "\000\066\002\uffc5\004\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\040" +
    "\uffc5\042\uffc5\044\uffc5\046\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\001\002\000\036\002\uffd9\004\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\037\uffd9\041\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\050\uffd9\051\uffd9\052\uffd9\001\002\000\066\002" +
    "\uffb4\004\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4\031\uffb4\032" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\040\uffb4\042\uffb4" +
    "\044\uffb4\046\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\001" +
    "\002\000\066\002\uffb5\004\uffb5\014\uffb5\015\uffb5\016\uffb5" +
    "\017\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\040\uffb5\042\uffb5\044\uffb5\046\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\001\002\000\040\022\065\023\054\024\052" +
    "\025\056\026\050\030\055\031\062\032\053\033\057\034" +
    "\061\035\060\036\051\040\063\044\116\053\064\001\002" +
    "\000\066\002\uffcb\004\uffcb\014\uffcb\015\uffcb\016\uffcb\017" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\040" +
    "\uffcb\042\uffcb\044\uffcb\046\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\001\002\000\030\004\042\005\036\006\040\007" +
    "\045\010\031\011\041\021\027\023\033\027\035\043\030" +
    "\045\044\001\002\000\040\022\065\023\054\024\052\025" +
    "\056\026\050\030\055\031\062\032\053\033\057\034\061" +
    "\035\060\036\051\040\063\044\121\053\064\001\002\000" +
    "\066\002\uffcc\004\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\040\uffcc" +
    "\042\uffcc\044\uffcc\046\uffcc\050\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\001\002\000\032\004\042\005\036\006\040\007\045" +
    "\010\031\011\041\021\027\023\033\027\035\042\123\043" +
    "\030\045\044\001\002\000\072\002\uffd5\004\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\044" +
    "\uffd5\046\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\001\002" +
    "\000\040\022\065\023\054\024\052\025\056\026\050\030" +
    "\055\031\062\032\053\033\057\034\061\035\060\036\051" +
    "\040\063\042\125\053\064\001\002\000\072\002\uffd6\004" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\044\uffd6\046\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\001\002\000\004\004\016\001\002\000\020\004\ufff3" +
    "\014\ufff3\016\ufff3\045\ufff3\047\130\050\ufff3\052\ufff3\001" +
    "\002\000\006\012\022\013\021\001\002\000\016\004\142" +
    "\014\144\016\141\045\146\050\132\052\133\001\002\000" +
    "\006\012\022\013\021\001\002\000\030\002\uffe1\004\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\037\uffe1\046\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\001\002\000\024\002\uffed\004\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\046\uffed\051\uffed\052" +
    "\uffed\001\002\000\024\002\uffe9\004\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\046\uffe9\051\uffe9\052\uffe9\001\002\000" +
    "\032\002\uffdd\004\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\037\uffdd\041\122\046\uffdd\050\uffdd\051\uffdd\052\uffdd\001" +
    "\002\000\030\002\uffe3\004\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\037\177\046\uffe3\050\176\051\uffe3\052\uffe3\001" +
    "\002\000\006\002\ufffa\004\ufffa\001\002\000\004\043\172" +
    "\001\002\000\036\002\uffd7\004\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\037\uffd7\041\uffd7\043\165\046\uffd7\047\166" +
    "\050\uffd7\051\uffd7\052\uffd7\001\002\000\024\002\uffec\004" +
    "\uffec\014\uffec\015\uffec\016\uffec\017\uffec\046\uffec\051\uffec" +
    "\052\uffec\001\002\000\004\043\157\001\002\000\024\002" +
    "\ufff1\004\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\046\ufff1" +
    "\051\ufff1\052\ufff1\001\002\000\016\004\uffee\014\uffee\016" +
    "\uffee\017\uffee\046\uffee\052\uffee\001\002\000\016\004\142" +
    "\014\144\016\141\017\150\046\uffd2\052\133\001\002\000" +
    "\036\004\042\005\036\006\040\007\045\010\031\011\041" +
    "\021\027\023\033\027\035\043\030\045\044\046\uffe6\050" +
    "\uffe6\051\uffe6\001\002\000\004\046\154\001\002\000\020" +
    "\004\ufff0\014\ufff0\016\ufff0\017\ufff0\046\ufff0\051\153\052" +
    "\ufff0\001\002\000\016\004\uffef\014\uffef\016\uffef\017\uffef" +
    "\046\uffef\052\uffef\001\002\000\024\002\ufff2\004\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\046\ufff2\051\ufff2\052\ufff2" +
    "\001\002\000\010\046\uffd4\050\104\051\156\001\002\000" +
    "\004\046\uffd3\001\002\000\030\004\042\005\036\006\040" +
    "\007\045\010\031\011\041\021\027\023\033\027\035\043" +
    "\030\045\044\001\002\000\040\022\065\023\054\024\052" +
    "\025\056\026\050\030\055\031\062\032\053\033\057\034" +
    "\061\035\060\036\051\040\063\044\161\053\064\001\002" +
    "\000\014\004\142\014\144\016\141\045\146\052\133\001" +
    "\002\000\024\002\uffe5\004\uffe5\014\uffe5\015\163\016\uffe5" +
    "\017\uffe5\046\uffe5\051\uffe5\052\uffe5\001\002\000\014\004" +
    "\142\014\144\016\141\045\146\052\133\001\002\000\024" +
    "\002\uffe4\004\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\046" +
    "\uffe4\051\uffe4\052\uffe4\001\002\000\034\004\042\005\036" +
    "\006\040\007\045\010\031\011\041\021\027\023\033\027" +
    "\035\043\030\044\uffe6\045\044\050\uffe6\001\002\000\006" +
    "\012\022\013\021\001\002\000\032\002\uffe0\004\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\037\uffe0\041\023\046\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\001\002\000\006\044\171\050" +
    "\104\001\002\000\024\002\uffea\004\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\046\uffea\051\uffea\052\uffea\001\002\000" +
    "\030\004\042\005\036\006\040\007\045\010\031\011\041" +
    "\021\027\023\033\027\035\043\030\045\044\001\002\000" +
    "\040\022\065\023\054\024\052\025\056\026\050\030\055" +
    "\031\062\032\053\033\057\034\061\035\060\036\051\040" +
    "\063\044\174\053\064\001\002\000\014\004\142\014\144" +
    "\016\141\045\146\052\133\001\002\000\024\002\uffeb\004" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\046\uffeb\051\uffeb" +
    "\052\uffeb\001\002\000\006\004\203\052\201\001\002\000" +
    "\030\004\042\005\036\006\040\007\045\010\031\011\041" +
    "\021\027\023\033\027\035\043\030\045\044\001\002\000" +
    "\060\002\uffe2\004\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\022\065\023\054\024\052\025\056\026\050\030\055\031" +
    "\062\032\053\033\057\034\061\035\060\036\051\040\063" +
    "\046\uffe2\051\uffe2\052\uffe2\053\064\001\002\000\030\002" +
    "\uffdf\004\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\037\uffdf" +
    "\046\uffdf\050\uffdf\051\uffdf\052\uffdf\001\002\000\032\002" +
    "\uffdc\004\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\037\uffdc" +
    "\041\122\046\uffdc\050\uffdc\051\uffdc\052\uffdc\001\002\000" +
    "\034\002\uffd7\004\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\037\uffd7\041\uffd7\046\uffd7\047\204\050\uffd7\051\uffd7\052" +
    "\uffd7\001\002\000\006\012\022\013\021\001\002\000\032" +
    "\002\uffde\004\uffde\014\uffde\015\uffde\016\uffde\017\uffde\037" +
    "\uffde\041\023\046\uffde\050\uffde\051\uffde\052\uffde\001\002" +
    "\000\020\004\ufff4\014\ufff4\016\ufff4\041\023\045\ufff4\050" +
    "\ufff4\052\ufff4\001\002\000\020\004\ufff5\014\ufff5\016\ufff5" +
    "\041\023\045\ufff5\050\ufff5\052\ufff5\001\002\000\006\044" +
    "\ufff9\050\ufff9\001\002\000\010\002\ufffd\004\ufffd\020\ufffd" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\004\007\007\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\014\012\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\025\023\036\024\042\025" +
    "\023\026\024\030\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\025\023\114\024\042\025\023\026\024\030\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\025\023" +
    "\113\024\042\025\023\026\024\030\033\001\001\000\002" +
    "\001\001\000\016\006\025\023\112\024\042\025\023\026" +
    "\024\030\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\025\023\046\024\042\025\023" +
    "\026\024\030\033\033\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\025\023\102" +
    "\024\042\025\023\026\024\030\033\001\001\000\016\006" +
    "\025\023\101\024\042\025\023\026\024\030\033\001\001" +
    "\000\016\006\025\023\100\024\042\025\023\026\024\030" +
    "\033\001\001\000\016\006\025\023\077\024\042\025\023" +
    "\026\024\030\033\001\001\000\016\006\025\023\076\024" +
    "\042\025\023\026\024\030\033\001\001\000\016\006\025" +
    "\023\075\024\042\025\023\026\024\030\033\001\001\000" +
    "\016\006\025\023\074\024\042\025\023\026\024\030\033" +
    "\001\001\000\016\006\025\023\073\024\042\025\023\026" +
    "\024\030\033\001\001\000\016\006\025\023\072\024\042" +
    "\025\023\026\024\030\033\001\001\000\016\006\025\023" +
    "\071\024\042\025\023\026\024\030\033\001\001\000\016" +
    "\006\025\023\070\024\042\025\023\026\024\030\033\001" +
    "\001\000\016\006\025\023\067\024\042\025\023\026\024" +
    "\030\033\001\001\000\016\006\025\023\066\024\042\025" +
    "\023\026\024\030\033\001\001\000\016\006\025\023\065" +
    "\024\042\025\023\026\024\030\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\025\023\105\024\042\025\023\026\024" +
    "\030\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\025\023\046\024\042\025\023\026\024\030\033" +
    "\033\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\025\023\117\024" +
    "\042\025\023\026\024\030\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\025\023\123\024\042\025" +
    "\023\026\024\030\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\207\001\001\000" +
    "\004\013\130\001\001\000\004\005\206\001\001\000\020" +
    "\006\135\014\137\016\144\017\134\021\136\031\133\032" +
    "\142\001\001\000\004\005\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\146\001\001\000\020\006\135\016\151" +
    "\017\134\021\136\022\150\031\133\032\142\001\001\000" +
    "\020\006\025\023\046\024\042\025\023\026\024\030\033" +
    "\033\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\025\023\157\024\042\025\023\026" +
    "\024\030\033\001\001\000\002\001\001\000\020\006\135" +
    "\014\161\016\144\017\134\021\136\031\133\032\142\001" +
    "\001\000\002\001\001\000\020\006\135\014\163\016\144" +
    "\017\134\021\136\031\133\032\142\001\001\000\002\001" +
    "\001\000\020\006\025\023\046\024\042\025\023\026\024" +
    "\030\033\033\167\001\001\000\004\005\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\025\023\172\024\042\025\023\026\024\030\033\001" +
    "\001\000\002\001\001\000\020\006\135\014\174\016\144" +
    "\017\134\021\136\031\133\032\142\001\001\000\002\001" +
    "\001\000\004\006\201\001\001\000\016\006\025\023\177" +
    "\024\042\025\023\026\024\030\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}



    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token;
        String line = String.format("%d:%d error:Unexpected token %s", tok.getLine() + 1, tok.getCol() + 1, tok.value);
        throw new Error(line);
    }
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        /*System.out.println(m);*/
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        return;
        /*System.exit(1);*/
    }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 77. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ListExpr start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<ListExpr> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // program ::= uselist funclist 
            {
                ListExpr RESULT = null;
                int usleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int usright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ListExpr us = CUP$parser$stack.elementAt(CUP$parser$top-1).<ListExpr> value();
                int flleft = CUP$parser$stack.peek().left;
                int flright = CUP$parser$stack.peek().right;
                ListExpr fl = CUP$parser$stack.peek().<ListExpr> value();
                 RESULT = new ListExpr(us, fl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // uselist ::= uselist useprod 
            {
                ListExpr RESULT = null;
                int ulleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ulright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ListExpr ul = CUP$parser$stack.elementAt(CUP$parser$top-1).<ListExpr> value();
                int upleft = CUP$parser$stack.peek().left;
                int upright = CUP$parser$stack.peek().right;
                Expr up = CUP$parser$stack.peek().<Expr> value();
                 ul.add(up); RESULT = ul; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("uselist",1, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // uselist ::= 
            {
                ListExpr RESULT = null;
                 RESULT = new ListExpr(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("uselist",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // useprod ::= USE ID 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new ListExpr("use" , new AtomExpr(id)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("useprod",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // funclist ::= funclist func 
            {
                ListExpr RESULT = null;
                int flleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int flright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ListExpr fl = CUP$parser$stack.elementAt(CUP$parser$top-1).<ListExpr> value();
                int fleft = CUP$parser$stack.peek().left;
                int fright = CUP$parser$stack.peek().right;
                Expr f = CUP$parser$stack.peek().<Expr> value();
                 fl.add(f); RESULT = fl; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("funclist",2, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // funclist ::= 
            {
                ListExpr RESULT = null;
                 RESULT = new ListExpr(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("funclist",2, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // func ::= ID LPAREN arglist RPAREN funtype block 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-5).<String> value();
                int alleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int alright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Expr al = CUP$parser$stack.elementAt(CUP$parser$top-3).<Expr> value();
                int ftleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ftright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr ft = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                int blleft = CUP$parser$stack.peek().left;
                int blright = CUP$parser$stack.peek().right;
                Expr bl = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ListExpr(new AtomExpr(id),al, ft,bl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // arglist ::= arglist COMMA arg 
            {
                Expr RESULT = null;
                int arglleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int arglright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr argl = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int aleft = CUP$parser$stack.peek().left;
                int aright = CUP$parser$stack.peek().right;
                Expr a = CUP$parser$stack.peek().<Expr> value();
                 ((ListExpr) argl).add(a); RESULT=argl; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",8, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // arglist ::= arg 
            {
                Expr RESULT = null;
                int aleft = CUP$parser$stack.peek().left;
                int aright = CUP$parser$stack.peek().right;
                Expr a = CUP$parser$stack.peek().<Expr> value();
                 RESULT =new ListExpr(a);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // arglist ::= 
            {
                Expr RESULT = null;
                 RESULT = new ListExpr();
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",8, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // arg ::= ID COLON vartype 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int vtleft = CUP$parser$stack.peek().left;
                int vtright = CUP$parser$stack.peek().right;
                ArrayExpr vt = CUP$parser$stack.peek().<ArrayExpr> value();
                 RESULT = new ListExpr(new AtomExpr(id), vt); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arg",7, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // funtype ::= COLON vartype 
            {
                Expr RESULT = null;
                int vtleft = CUP$parser$stack.peek().left;
                int vtright = CUP$parser$stack.peek().right;
                ArrayExpr vt = CUP$parser$stack.peek().<ArrayExpr> value();
                 RESULT = new ListExpr(vt); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("funtype",9, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // funtype ::= funtype COMMA vartype 
            {
                Expr RESULT = null;
                int ftleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ftright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr ft = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int vtleft = CUP$parser$stack.peek().left;
                int vtright = CUP$parser$stack.peek().right;
                ArrayExpr vt = CUP$parser$stack.peek().<ArrayExpr> value();
                 ((ListExpr) ft).add(vt); RESULT = ft ;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("funtype",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // funtype ::= 
            {
                Expr RESULT = null;
                 RESULT = new ListExpr(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("funtype",9, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // block ::= LBRACE stmtlist retop RBRACE 
            {
                Expr RESULT = null;
                int slleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int slright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr sl = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int retleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int retright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr ret = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new ListExpr(sl, ret); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",10, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // block ::= stmt 
            {
                Expr RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Expr s = CUP$parser$stack.peek().<Expr> value();
                 RESULT = s; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // stmtlist ::= stmtlist stmt 
            {
                Expr RESULT = null;
                int stmlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int stmlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr stml = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                int stmleft = CUP$parser$stack.peek().left;
                int stmright = CUP$parser$stack.peek().right;
                Expr stm = CUP$parser$stack.peek().<Expr> value();
                 ((ArgExpr) stml).add(new ArgExpr(stm)); RESULT = stml ; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtlist",11, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // stmtlist ::= stmtlist stmt SEMI 
            {
                Expr RESULT = null;
                int stmlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int stmlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr stml = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int stmleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int stmright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr stm = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 ((ArgExpr) stml).add(new ArgExpr(stm)); RESULT = stml ; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtlist",11, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // stmtlist ::= 
            {
                Expr RESULT = null;
                 RESULT = new ArgExpr(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtlist",11, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // stmt ::= ifblock 
            {
                Expr RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Expr s = CUP$parser$stack.peek().<Expr> value();
                 RESULT = s; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // stmt ::= ifelseblock 
            {
                Expr RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Expr s = CUP$parser$stack.peek().<Expr> value();
                 RESULT = s; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // stmt ::= WHILE LPAREN expr RPAREN block 
            {
                Expr RESULT = null;
                int conditionleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int conditionright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr condition = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int stmleft = CUP$parser$stack.peek().left;
                int stmright = CUP$parser$stack.peek().right;
                Expr stm = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ListExpr("while", condition, stm); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // stmt ::= ID LPAREN idlist RPAREN 
            {
                Expr RESULT = null;
                int xleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int xright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String x = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int idlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr idl = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new ListExpr(x, idl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // stmt ::= decl 
            {
                Expr RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Expr s = CUP$parser$stack.peek().<Expr> value();
                 RESULT = s; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // idlist ::= expr 
            {
                Expr RESULT = null;
                int exp1left = CUP$parser$stack.peek().left;
                int exp1right = CUP$parser$stack.peek().right;
                Expr exp1 = CUP$parser$stack.peek().<Expr> value();
                RESULT = new ArgExpr(exp1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("idlist",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // idlist ::= idlist COMMA expr 
            {
                Expr RESULT = null;
                int idlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr idl = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int exp1left = CUP$parser$stack.peek().left;
                int exp1right = CUP$parser$stack.peek().right;
                Expr exp1 = CUP$parser$stack.peek().<Expr> value();
                 ((ArgExpr) idl).add(exp1); RESULT = idl ; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("idlist",25, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // idlist ::= 
            {
                Expr RESULT = null;
                RESULT = new ArgExpr(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("idlist",25, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // ifblock ::= IF LPAREN expr RPAREN block 
            {
                Expr RESULT = null;
                int predicateleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int predicateright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr predicate = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int consequentleft = CUP$parser$stack.peek().left;
                int consequentright = CUP$parser$stack.peek().right;
                Expr consequent = CUP$parser$stack.peek().<Expr> value();
                RESULT = new ListExpr("if", predicate, consequent); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("ifblock",23, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // ifelseblock ::= IF LPAREN expr RPAREN block ELSE block 
            {
                Expr RESULT = null;
                int predicateleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int predicateright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Expr predicate = CUP$parser$stack.elementAt(CUP$parser$top-4).<Expr> value();
                int consequentleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int consequentright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr consequent = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int alternativeleft = CUP$parser$stack.peek().left;
                int alternativeright = CUP$parser$stack.peek().right;
                Expr alternative = CUP$parser$stack.peek().<Expr> value();
                RESULT = new ListExpr("if", predicate, consequent, alternative); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("ifelseblock",24, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // decl ::= decllist 
            {
                Expr RESULT = null;
                int dlleft = CUP$parser$stack.peek().left;
                int dlright = CUP$parser$stack.peek().right;
                Expr dl = CUP$parser$stack.peek().<Expr> value();
                 RESULT = dl;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // decl ::= decllist EQ expr 
            {
                Expr RESULT = null;
                int dclleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int dclright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr dcl = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int exp1left = CUP$parser$stack.peek().left;
                int exp1right = CUP$parser$stack.peek().right;
                Expr exp1 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr("=", dcl, exp1) ; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",13, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // decllist ::= UNDERSCORE 
            {
                Expr RESULT = null;
                 RESULT = new ListExpr("_"); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decllist",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // decllist ::= ID COLON vartype 
            {
                Expr RESULT = null;
                int xleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int xright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String x = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int vtleft = CUP$parser$stack.peek().left;
                int vtright = CUP$parser$stack.peek().right;
                ArrayExpr vt = CUP$parser$stack.peek().<ArrayExpr> value();
                 RESULT = new ListExpr(x,vt); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decllist",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // decllist ::= decllist COMMA UNDERSCORE 
            {
                Expr RESULT = null;
                int dclleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int dclright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr dcl = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                 ListExpr ret = new ListExpr();
					  ret.add(dcl); ret.add(new ListExpr("_"));  
					  RESULT = ret;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decllist",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // decllist ::= decllist COMMA ID COLON vartype 
            {
                Expr RESULT = null;
                int dclleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int dclright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Expr dcl = CUP$parser$stack.elementAt(CUP$parser$top-4).<Expr> value();
                int xleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int xright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String x = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int vtleft = CUP$parser$stack.peek().left;
                int vtright = CUP$parser$stack.peek().right;
                ArrayExpr vt = CUP$parser$stack.peek().<ArrayExpr> value();
                 ListExpr ret = new ListExpr();
					  ret.add(dcl); ret.add(new ListExpr(x,vt));  
					  RESULT = ret;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decllist",15, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // decllist ::= var 
            {
                Expr RESULT = null;
                int xleft = CUP$parser$stack.peek().left;
                int xright = CUP$parser$stack.peek().right;
                ArrayExpr x = CUP$parser$stack.peek().<ArrayExpr> value();
                 RESULT = x; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decllist",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // decllist ::= decllist COMMA var 
            {
                Expr RESULT = null;
                int dclleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int dclright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr dcl = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int xleft = CUP$parser$stack.peek().left;
                int xright = CUP$parser$stack.peek().right;
                ArrayExpr x = CUP$parser$stack.peek().<ArrayExpr> value();
                 ListExpr ret = new ListExpr();
					ret.add(dcl); ret.add(x);  
					RESULT = ret;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decllist",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // vartype ::= INT 
            {
                ArrayExpr RESULT = null;
                RESULT = new ArrayExpr("int"); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("vartype",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // vartype ::= BOOL 
            {
                ArrayExpr RESULT = null;
                RESULT = new ArrayExpr("bool"); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("vartype",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // vartype ::= vartype LBRACKET expr RBRACKET 
            {
                ArrayExpr RESULT = null;
                int vtleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int vtright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrayExpr vt = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrayExpr> value();
                int expleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int expright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr exp = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                vt.push(exp); RESULT = vt;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("vartype",3, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // vartype ::= vartype LBRACKET RBRACKET 
            {
                ArrayExpr RESULT = null;
                int vtleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int vtright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayExpr vt = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayExpr> value();
                vt.push(new AtomExpr("")); RESULT = vt;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("vartype",3, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // var ::= ID 
            {
                ArrayExpr RESULT = null;
                int xleft = CUP$parser$stack.peek().left;
                int xright = CUP$parser$stack.peek().right;
                String x = CUP$parser$stack.peek().<String> value();
                RESULT = new ArrayExpr(x); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var",4, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // var ::= var LBRACKET expr RBRACKET 
            {
                ArrayExpr RESULT = null;
                int vtleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int vtright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrayExpr vt = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrayExpr> value();
                int expleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int expright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr exp = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                (vt).push(exp); RESULT = vt;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var",4, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // var ::= var LBRACKET RBRACKET 
            {
                ArrayExpr RESULT = null;
                int vtleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int vtright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayExpr vt = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayExpr> value();
                (vt).push(new AtomExpr("")); RESULT = vt;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // retop ::= RETURN idlist 
            {
                Expr RESULT = null;
                int elleft = CUP$parser$stack.peek().left;
                int elright = CUP$parser$stack.peek().right;
                Expr el = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ListExpr("return",el);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("retop",16, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // retop ::= RETURN idlist SEMI 
            {
                Expr RESULT = null;
                int elleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int elright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr el = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new ListExpr("return",el);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("retop",16, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // retop ::= 
            {
                Expr RESULT = null;
                 RESULT = new ArgExpr(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("retop",16, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // expr ::= INTEGER 
            {
                Expr RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Integer i = CUP$parser$stack.peek().<Integer> value();
                 RESULT = new AtomExpr(i); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // expr ::= STRING 
            {
                Expr RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                String s = CUP$parser$stack.peek().<String> value();
                 RESULT = new AtomExpr(s,true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // expr ::= CHARACTER 
            {
                Expr RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                String c = CUP$parser$stack.peek().<String> value();
                 RESULT = new AtomExpr(c.charAt(0)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // expr ::= TRUE 
            {
                Expr RESULT = null;
                 RESULT = new AtomExpr("true"); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // expr ::= FALSE 
            {
                Expr RESULT = null;
                 RESULT = new AtomExpr("false"); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // expr ::= LENGTH LPAREN expr RPAREN 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new ListExpr("length",e1 ); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // expr ::= LPAREN expr RPAREN 
            {
                Expr RESULT = null;
                int exleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int exright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr ex = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = ex;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // expr ::= var 
            {
                Expr RESULT = null;
                int vtleft = CUP$parser$stack.peek().left;
                int vtright = CUP$parser$stack.peek().right;
                ArrayExpr vt = CUP$parser$stack.peek().<ArrayExpr> value();
                 RESULT = vt ;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // expr ::= binaryexpr 
            {
                Expr RESULT = null;
                int beleft = CUP$parser$stack.peek().left;
                int beright = CUP$parser$stack.peek().right;
                Expr be = CUP$parser$stack.peek().<Expr> value();
                 RESULT = be; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // expr ::= unaryexpr 
            {
                Expr RESULT = null;
                int neleft = CUP$parser$stack.peek().left;
                int neright = CUP$parser$stack.peek().right;
                Expr ne = CUP$parser$stack.peek().<Expr> value();
                 RESULT = ne; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // expr ::= funcall 
            {
                Expr RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                Expr fc = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ArgExpr(fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // expr ::= tuple 
            {
                Expr RESULT = null;
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                Expr tl = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ArgExpr(tl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // funcall ::= ID LPAREN idlist RPAREN 
            {
                Expr RESULT = null;
                int xleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int xright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String x = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int elleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int elright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr el = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new ListExpr( x, el); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("funcall",20, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // tuple ::= LBRACE idlist RBRACE 
            {
                Expr RESULT = null;
                int elleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int elright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr el = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new ListExpr(el); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",22, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // binaryexpr ::= expr PLUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr("+", e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // binaryexpr ::= expr MINUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr("-", e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // binaryexpr ::= expr TIMES expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr("*", e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // binaryexpr ::= expr DIV expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr("/", e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // binaryexpr ::= expr MOD expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr("%", e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // binaryexpr ::= expr LANGLE expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr("<", e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // binaryexpr ::= expr RANGLE expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(">", e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // binaryexpr ::= expr LEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr("<=", e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // binaryexpr ::= expr GEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(">=", e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // binaryexpr ::= expr EQEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr("==", e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // binaryexpr ::= expr NEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr("!=", e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // binaryexpr ::= expr AND expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr("&", e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // binaryexpr ::= expr OR expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr("|", e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // binaryexpr ::= expr HIGHMUL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr("*>>", e1,e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // unaryexpr ::= MINUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.peek().left;
                int e1right = CUP$parser$stack.peek().right;
                Expr e1 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ListExpr("-", e1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",19, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // unaryexpr ::= NOT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.peek().left;
                int e1right = CUP$parser$stack.peek().right;
                Expr e1 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ListExpr("!", e1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",19, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
