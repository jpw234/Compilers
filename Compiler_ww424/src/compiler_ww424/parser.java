
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package compiler_ww424;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import compiler_ww424.Lexer.Token;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\005\004\000\002\005\005" +
    "\000\002\004\004\000\002\004\003\000\002\022\010\000" +
    "\002\006\005\000\002\006\003\000\002\006\002\000\002" +
    "\010\005\000\002\012\004\000\002\012\005\000\002\012" +
    "\002\000\002\016\003\000\002\016\003\000\002\016\005" +
    "\000\002\015\006\000\002\032\004\000\002\032\005\000" +
    "\002\032\002\000\002\034\003\000\002\034\003\000\002" +
    "\034\007\000\002\034\006\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\033\003" +
    "\000\002\033\005\000\002\033\002\000\002\036\007\000" +
    "\002\037\011\000\002\011\003\000\002\035\005\000\002" +
    "\007\003\000\002\007\005\000\002\007\005\000\002\007" +
    "\007\000\002\031\005\000\002\014\003\000\002\014\003" +
    "\000\002\014\005\000\002\014\006\000\002\020\003\000" +
    "\002\020\005\000\002\020\006\000\002\040\004\000\002" +
    "\040\005\000\002\040\002\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\006" +
    "\000\002\017\005\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\025\006\000\002\027\005\000\002\027\003\000\002\027" +
    "\006\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\024\004\000\002\024\004" +
    "" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\006\004\ufffe\020\ufffe\001\002\000\004\002" +
    "\226\001\002\000\006\004\012\020\010\001\002\000\006" +
    "\004\uffff\020\uffff\001\002\000\006\002\ufffa\004\ufffa\001" +
    "\002\000\004\004\224\001\002\000\006\002\000\004\012" +
    "\001\002\000\004\043\013\001\002\000\010\004\016\044" +
    "\ufff6\050\ufff6\001\002\000\006\044\026\050\025\001\002" +
    "\000\006\044\ufff7\050\ufff7\001\002\000\004\047\017\001" +
    "\002\000\006\010\022\011\021\001\002\000\010\041\023" +
    "\044\ufff5\050\ufff5\001\002\000\012\041\ufff0\044\ufff0\045" +
    "\ufff0\050\ufff0\001\002\000\012\041\ufff1\044\ufff1\045\ufff1" +
    "\050\ufff1\001\002\000\004\042\024\001\002\000\012\041" +
    "\uffef\044\uffef\045\uffef\050\uffef\001\002\000\004\004\016" +
    "\001\002\000\010\045\ufff2\047\027\050\ufff2\001\002\000" +
    "\006\010\022\011\021\001\002\000\006\045\033\050\031" +
    "\001\002\000\006\010\022\011\021\001\002\000\006\002" +
    "\ufff9\004\ufff9\001\002\000\020\004\uffeb\014\uffeb\016\uffeb" +
    "\017\uffeb\045\uffeb\046\uffeb\052\uffeb\001\002\000\020\004" +
    "\050\014\052\016\046\017\043\045\033\046\uffcd\052\036" +
    "\001\002\000\022\004\uffe4\014\uffe4\016\uffe4\017\uffe4\045" +
    "\uffe4\046\uffe4\051\uffe4\052\uffe4\001\002\000\026\004\uffdb" +
    "\014\uffdb\016\uffdb\017\uffdb\037\uffdb\045\uffdb\046\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\001\002\000\022\004\uffe6\014\uffe6" +
    "\016\uffe6\017\uffe6\045\uffe6\046\uffe6\051\uffe6\052\uffe6\001" +
    "\002\000\022\004\uffea\014\uffea\016\uffea\017\uffea\045\uffea" +
    "\046\uffea\051\uffea\052\uffea\001\002\000\006\037\216\041" +
    "\161\001\002\000\022\004\uffe5\014\uffe5\016\uffe5\017\uffe5" +
    "\045\uffe5\046\uffe5\051\uffe5\052\uffe5\001\002\000\034\004" +
    "\073\005\067\006\071\007\076\012\063\013\072\021\061" +
    "\023\064\027\066\043\062\045\075\046\uffe0\051\uffe0\001" +
    "\002\000\004\046\213\001\002\000\026\004\uffdd\014\uffdd" +
    "\016\uffdd\017\uffdd\037\205\045\uffdd\046\uffdd\050\204\051" +
    "\uffdd\052\uffdd\001\002\000\004\043\200\001\002\000\022" +
    "\004\uffe3\014\uffe3\016\uffe3\017\uffe3\045\uffe3\046\uffe3\051" +
    "\uffe3\052\uffe3\001\002\000\012\037\uffd2\041\uffd2\043\165" +
    "\047\166\001\002\000\022\004\uffe9\014\uffe9\016\uffe9\017" +
    "\uffe9\045\uffe9\046\uffe9\051\uffe9\052\uffe9\001\002\000\004" +
    "\043\055\001\002\000\022\004\uffed\014\uffed\016\uffed\017" +
    "\uffed\045\uffed\046\uffed\051\054\052\uffed\001\002\000\020" +
    "\004\uffec\014\uffec\016\uffec\017\uffec\045\uffec\046\uffec\052" +
    "\uffec\001\002\000\030\004\073\005\067\006\071\007\076" +
    "\012\063\013\072\021\061\023\064\027\066\043\062\045" +
    "\075\001\002\000\064\004\uffc4\014\uffc4\016\uffc4\017\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\040\uffc4" +
    "\042\uffc4\044\uffc4\045\uffc4\046\uffc4\050\uffc4\051\uffc4\052" +
    "\uffc4\053\uffc4\001\002\000\064\004\uffc3\014\uffc3\016\uffc3" +
    "\017\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\040\uffc3\042\uffc3\044\uffc3\045\uffc3\046\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\053\uffc3\001\002\000\066\004\uffc6\014\uffc6" +
    "\016\uffc6\017\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\040\uffc6\041\161\042\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\001\002\000\004" +
    "\043\156\001\002\000\030\004\073\005\067\006\071\007" +
    "\076\012\063\013\072\021\061\023\064\027\066\043\062" +
    "\045\075\001\002\000\064\004\uffca\014\uffca\016\uffca\017" +
    "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\040" +
    "\uffca\042\uffca\044\uffca\045\uffca\046\uffca\050\uffca\051\uffca" +
    "\052\uffca\053\uffca\001\002\000\030\004\073\005\067\006" +
    "\071\007\076\012\063\013\072\021\061\023\064\027\066" +
    "\043\062\045\075\001\002\000\066\004\uffc2\014\uffc2\016" +
    "\uffc2\017\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\040\uffc2\041\150\042\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\053\uffc2\001\002\000\030\004" +
    "\073\005\067\006\071\007\076\012\063\013\072\021\061" +
    "\023\064\027\066\043\062\045\075\001\002\000\066\004" +
    "\uffbf\014\uffbf\016\uffbf\017\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\040\uffbf\041\uffbf\042\uffbf\044\uffbf" +
    "\045\uffbf\046\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\001" +
    "\002\000\040\022\117\023\106\024\104\025\110\026\102" +
    "\030\107\031\114\032\105\033\111\034\113\035\112\036" +
    "\103\040\115\044\143\053\116\001\002\000\064\004\uffcb" +
    "\014\uffcb\016\uffcb\017\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\040\uffcb\042\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\001\002\000\064" +
    "\004\uffc9\014\uffc9\016\uffc9\017\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\040\uffc9\042\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\001\002" +
    "\000\070\004\uffd2\014\uffd2\016\uffd2\017\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\043\140\044\uffd2\045\uffd2\046\uffd2\050\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\001\002\000\064\004\uffc5\014\uffc5\016" +
    "\uffc5\017\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\040\uffc5\042\uffc5\044\uffc5\045\uffc5\046\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\053\uffc5\001\002\000\032\004\073\005" +
    "\067\006\071\007\076\012\063\013\072\021\061\023\064" +
    "\027\066\043\062\045\075\046\uffe0\001\002\000\064\004" +
    "\uffcc\014\uffcc\016\uffcc\017\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\040\uffcc\042\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\001\002\000" +
    "\004\046\137\001\002\000\046\022\117\023\106\024\104" +
    "\025\110\026\102\030\107\031\114\032\105\033\111\034" +
    "\113\035\112\036\103\040\115\044\uffe2\046\uffe2\050\101" +
    "\051\uffe2\053\116\001\002\000\036\004\073\005\067\006" +
    "\071\007\076\012\063\013\072\021\061\023\064\027\066" +
    "\043\062\044\uffe0\045\075\046\uffe0\051\uffe0\001\002\000" +
    "\030\004\073\005\067\006\071\007\076\012\063\013\072" +
    "\021\061\023\064\027\066\043\062\045\075\001\002\000" +
    "\030\004\073\005\067\006\071\007\076\012\063\013\072" +
    "\021\061\023\064\027\066\043\062\045\075\001\002\000" +
    "\030\004\073\005\067\006\071\007\076\012\063\013\072" +
    "\021\061\023\064\027\066\043\062\045\075\001\002\000" +
    "\030\004\073\005\067\006\071\007\076\012\063\013\072" +
    "\021\061\023\064\027\066\043\062\045\075\001\002\000" +
    "\030\004\073\005\067\006\071\007\076\012\063\013\072" +
    "\021\061\023\064\027\066\043\062\045\075\001\002\000" +
    "\030\004\073\005\067\006\071\007\076\012\063\013\072" +
    "\021\061\023\064\027\066\043\062\045\075\001\002\000" +
    "\030\004\073\005\067\006\071\007\076\012\063\013\072" +
    "\021\061\023\064\027\066\043\062\045\075\001\002\000" +
    "\030\004\073\005\067\006\071\007\076\012\063\013\072" +
    "\021\061\023\064\027\066\043\062\045\075\001\002\000" +
    "\030\004\073\005\067\006\071\007\076\012\063\013\072" +
    "\021\061\023\064\027\066\043\062\045\075\001\002\000" +
    "\030\004\073\005\067\006\071\007\076\012\063\013\072" +
    "\021\061\023\064\027\066\043\062\045\075\001\002\000" +
    "\030\004\073\005\067\006\071\007\076\012\063\013\072" +
    "\021\061\023\064\027\066\043\062\045\075\001\002\000" +
    "\030\004\073\005\067\006\071\007\076\012\063\013\072" +
    "\021\061\023\064\027\066\043\062\045\075\001\002\000" +
    "\030\004\073\005\067\006\071\007\076\012\063\013\072" +
    "\021\061\023\064\027\066\043\062\045\075\001\002\000" +
    "\030\004\073\005\067\006\071\007\076\012\063\013\072" +
    "\021\061\023\064\027\066\043\062\045\075\001\002\000" +
    "\064\004\uffbd\014\uffbd\016\uffbd\017\uffbd\022\uffbd\023\uffbd" +
    "\024\104\025\110\026\102\030\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\040\uffbd\042\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\050\uffbd\051\uffbd\052\uffbd\053\116\001" +
    "\002\000\064\004\uffb0\014\uffb0\016\uffb0\017\uffb0\022\uffb0" +
    "\023\uffb0\024\104\025\110\026\102\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\040\uffb0\042\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\001\002\000\064\004\uffb3\014\uffb3\016\uffb3\017\uffb3" +
    "\022\117\023\106\024\104\025\110\026\102\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\040\uffb3" +
    "\042\uffb3\044\uffb3\045\uffb3\046\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\116\001\002\000\064\004\uffb6\014\uffb6\016\uffb6" +
    "\017\uffb6\022\117\023\106\024\104\025\110\026\102\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\040\uffb6\042\uffb6\044\uffb6\045\uffb6\046\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\053\116\001\002\000\064\004\uffb4\014\uffb4" +
    "\016\uffb4\017\uffb4\022\117\023\106\024\104\025\110\026" +
    "\102\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\040\uffb4\042\uffb4\044\uffb4\045\uffb4\046\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\053\116\001\002\000\064\004\uffb2" +
    "\014\uffb2\016\uffb2\017\uffb2\022\117\023\106\024\104\025" +
    "\110\026\102\030\107\031\114\032\105\033\111\034\113" +
    "\035\uffb2\036\uffb2\040\115\042\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\053\116\001\002\000\064" +
    "\004\uffb5\014\uffb5\016\uffb5\017\uffb5\022\117\023\106\024" +
    "\104\025\110\026\102\030\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\040\uffb5\042\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\050\uffb5\051\uffb5\052\uffb5\053\116\001\002" +
    "\000\064\004\uffba\014\uffba\016\uffba\017\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\030\uffba\031\uffba\032\uffba" +
    "\033\uffba\034\uffba\035\uffba\036\uffba\040\uffba\042\uffba\044" +
    "\uffba\045\uffba\046\uffba\050\uffba\051\uffba\052\uffba\053\uffba" +
    "\001\002\000\064\004\uffb8\014\uffb8\016\uffb8\017\uffb8\022" +
    "\117\023\106\024\104\025\110\026\102\030\uffb8\031\uffb8" +
    "\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\040\uffb8\042" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\053\116\001\002\000\064\004\uffbc\014\uffbc\016\uffbc\017" +
    "\uffbc\022\uffbc\023\uffbc\024\104\025\110\026\102\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\040" +
    "\uffbc\042\uffbc\044\uffbc\045\uffbc\046\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\053\116\001\002\000\064\004\uffb7\014\uffb7\016" +
    "\uffb7\017\uffb7\022\117\023\106\024\104\025\110\026\102" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\040\uffb7\042\uffb7\044\uffb7\045\uffb7\046\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\053\116\001\002\000\064\004\uffbb\014" +
    "\uffbb\016\uffbb\017\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\026\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035" +
    "\uffbb\036\uffbb\040\uffbb\042\uffbb\044\uffbb\045\uffbb\046\uffbb" +
    "\050\uffbb\051\uffbb\052\uffbb\053\uffbb\001\002\000\064\004" +
    "\uffb1\014\uffb1\016\uffb1\017\uffb1\022\117\023\106\024\104" +
    "\025\110\026\102\030\107\031\114\032\105\033\111\034" +
    "\113\035\112\036\uffb1\040\115\042\uffb1\044\uffb1\045\uffb1" +
    "\046\uffb1\050\uffb1\051\uffb1\052\uffb1\053\116\001\002\000" +
    "\064\004\uffb9\014\uffb9\016\uffb9\017\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\030\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\040\uffb9\042\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\001" +
    "\002\000\010\044\uffe1\046\uffe1\051\uffe1\001\002\000\066" +
    "\004\uffc0\014\uffc0\016\uffc0\017\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\040\uffc0\041\uffc0\042\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0" +
    "\001\002\000\032\004\073\005\067\006\071\007\076\012" +
    "\063\013\072\021\061\023\064\027\066\043\062\044\uffe0" +
    "\045\075\001\002\000\004\044\142\001\002\000\064\004" +
    "\uffc1\014\uffc1\016\uffc1\017\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\040\uffc1\042\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\001\002\000" +
    "\004\045\033\001\002\000\024\004\uffdf\014\uffdf\015\145" +
    "\016\uffdf\017\uffdf\045\uffdf\046\uffdf\051\uffdf\052\uffdf\001" +
    "\002\000\004\045\033\001\002\000\022\004\uffde\014\uffde" +
    "\016\uffde\017\uffde\045\uffde\046\uffde\051\uffde\052\uffde\001" +
    "\002\000\064\004\uffae\014\uffae\016\uffae\017\uffae\022\uffae" +
    "\023\uffae\024\uffae\025\uffae\026\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\040\uffae\042\uffae" +
    "\044\uffae\045\uffae\046\uffae\050\uffae\051\uffae\052\uffae\053" +
    "\uffae\001\002\000\030\004\073\005\067\006\071\007\076" +
    "\012\063\013\072\021\061\023\064\027\066\043\062\045" +
    "\075\001\002\000\040\022\117\023\106\024\104\025\110" +
    "\026\102\030\107\031\114\032\105\033\111\034\113\035" +
    "\112\036\103\040\115\042\152\053\116\001\002\000\066" +
    "\004\uffbe\014\uffbe\016\uffbe\017\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\040\uffbe\041\uffbe\042\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\001\002\000\064\004\uffaf\014\uffaf\016\uffaf\017\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\040\uffaf\042" +
    "\uffaf\044\uffaf\045\uffaf\046\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\053\uffaf\001\002\000\040\022\117\023\106\024\104\025" +
    "\110\026\102\030\107\031\114\032\105\033\111\034\113" +
    "\035\112\036\103\040\115\044\155\053\116\001\002\000" +
    "\064\004\uffc7\014\uffc7\016\uffc7\017\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\040\uffc7\042\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\001" +
    "\002\000\030\004\073\005\067\006\071\007\076\012\063" +
    "\013\072\021\061\023\064\027\066\043\062\045\075\001" +
    "\002\000\040\022\117\023\106\024\104\025\110\026\102" +
    "\030\107\031\114\032\105\033\111\034\113\035\112\036" +
    "\103\040\115\044\160\053\116\001\002\000\064\004\uffc8" +
    "\014\uffc8\016\uffc8\017\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\040\uffc8\042\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\001\002\000\032" +
    "\004\073\005\067\006\071\007\076\012\063\013\072\021" +
    "\061\023\064\027\066\042\162\043\062\045\075\001\002" +
    "\000\070\004\uffd1\014\uffd1\016\uffd1\017\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\044\uffd1\045\uffd1\046\uffd1\050\uffd1\051\uffd1" +
    "\052\uffd1\053\uffd1\001\002\000\040\022\117\023\106\024" +
    "\104\025\110\026\102\030\107\031\114\032\105\033\111" +
    "\034\113\035\112\036\103\040\115\042\164\053\116\001" +
    "\002\000\070\004\uffd0\014\uffd0\016\uffd0\017\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\044\uffd0\045\uffd0\046\uffd0\050\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\001\002\000\032\004\073\005\067" +
    "\006\071\007\076\012\063\013\072\021\061\023\064\027" +
    "\066\043\062\044\uffe0\045\075\001\002\000\006\010\171" +
    "\011\170\001\002\000\030\004\uffda\014\uffda\016\uffda\017" +
    "\uffda\037\uffda\041\172\045\uffda\046\uffda\050\uffda\051\uffda" +
    "\052\uffda\001\002\000\030\004\uffd5\014\uffd5\016\uffd5\017" +
    "\uffd5\037\uffd5\041\uffd5\045\uffd5\046\uffd5\050\uffd5\051\uffd5" +
    "\052\uffd5\001\002\000\030\004\uffd6\014\uffd6\016\uffd6\017" +
    "\uffd6\037\uffd6\041\uffd6\045\uffd6\046\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\001\002\000\032\004\073\005\067\006\071\007" +
    "\076\012\063\013\072\021\061\023\064\027\066\042\173" +
    "\043\062\045\075\001\002\000\030\004\uffd4\014\uffd4\016" +
    "\uffd4\017\uffd4\037\uffd4\041\uffd4\045\uffd4\046\uffd4\050\uffd4" +
    "\051\uffd4\052\uffd4\001\002\000\040\022\117\023\106\024" +
    "\104\025\110\026\102\030\107\031\114\032\105\033\111" +
    "\034\113\035\112\036\103\040\115\042\175\053\116\001" +
    "\002\000\030\004\uffd3\014\uffd3\016\uffd3\017\uffd3\037\uffd3" +
    "\041\uffd3\045\uffd3\046\uffd3\050\uffd3\051\uffd3\052\uffd3\001" +
    "\002\000\004\044\177\001\002\000\022\004\uffe7\014\uffe7" +
    "\016\uffe7\017\uffe7\045\uffe7\046\uffe7\051\uffe7\052\uffe7\001" +
    "\002\000\030\004\073\005\067\006\071\007\076\012\063" +
    "\013\072\021\061\023\064\027\066\043\062\045\075\001" +
    "\002\000\040\022\117\023\106\024\104\025\110\026\102" +
    "\030\107\031\114\032\105\033\111\034\113\035\112\036" +
    "\103\040\115\044\202\053\116\001\002\000\004\045\033" +
    "\001\002\000\022\004\uffe8\014\uffe8\016\uffe8\017\uffe8\045" +
    "\uffe8\046\uffe8\051\uffe8\052\uffe8\001\002\000\006\004\210" +
    "\052\207\001\002\000\030\004\073\005\067\006\071\007" +
    "\076\012\063\013\072\021\061\023\064\027\066\043\062" +
    "\045\075\001\002\000\056\004\uffdc\014\uffdc\016\uffdc\017" +
    "\uffdc\022\117\023\106\024\104\025\110\026\102\030\107" +
    "\031\114\032\105\033\111\034\113\035\112\036\103\040" +
    "\115\045\uffdc\046\uffdc\051\uffdc\052\uffdc\053\116\001\002" +
    "\000\026\004\uffd9\014\uffd9\016\uffd9\017\uffd9\037\uffd9\045" +
    "\uffd9\046\uffd9\050\uffd9\051\uffd9\052\uffd9\001\002\000\004" +
    "\047\211\001\002\000\006\010\171\011\170\001\002\000" +
    "\030\004\uffd8\014\uffd8\016\uffd8\017\uffd8\037\uffd8\041\172" +
    "\045\uffd8\046\uffd8\050\uffd8\051\uffd8\052\uffd8\001\002\000" +
    "\026\002\uffee\004\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\045\uffee\046\uffee\051\uffee\052\uffee\001\002\000\006\046" +
    "\uffcf\051\215\001\002\000\004\046\uffce\001\002\000\030" +
    "\004\073\005\067\006\071\007\076\012\063\013\072\021" +
    "\061\023\064\027\066\043\062\045\075\001\002\000\056" +
    "\004\uffd7\014\uffd7\016\uffd7\017\uffd7\022\117\023\106\024" +
    "\104\025\110\026\102\030\107\031\114\032\105\033\111" +
    "\034\113\035\112\036\103\040\115\045\uffd7\046\uffd7\051" +
    "\uffd7\052\uffd7\053\116\001\002\000\010\041\023\045\ufff3" +
    "\050\ufff3\001\002\000\010\041\023\045\ufff4\050\ufff4\001" +
    "\002\000\006\044\ufff8\050\ufff8\001\002\000\006\002\ufffb" +
    "\004\ufffb\001\002\000\010\004\ufffd\020\ufffd\051\225\001" +
    "\002\000\006\004\ufffc\020\ufffc\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\004\010\005\005\022\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\222\001\001\000\002\001\001\000\006\006\013\010\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\221\001\001\000\004\012\027\001\001" +
    "\000\004\016\220\001\001\000\004\015\031\001\001\000" +
    "\004\016\217\001\001\000\002\001\001\000\004\032\033" +
    "\001\001\000\026\007\044\011\036\015\046\020\040\031" +
    "\034\034\052\035\041\036\037\037\050\040\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\017\077\020\057\023\073\024\055\025\056\027\064\033" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\067\020\057\023\073\024\055\025\056\027" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\153\020\057\023" +
    "\073\024\055\025\056\027\064\001\001\000\002\001\001" +
    "\000\016\017\152\020\057\023\073\024\055\025\056\027" +
    "\064\001\001\000\002\001\001\000\016\017\146\020\057" +
    "\023\073\024\055\025\056\027\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\017\077\020" +
    "\057\023\073\024\055\025\056\027\064\033\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\017\077\020\057\023\073\024\055\025\056\027\064" +
    "\033\135\001\001\000\016\017\134\020\057\023\073\024" +
    "\055\025\056\027\064\001\001\000\016\017\133\020\057" +
    "\023\073\024\055\025\056\027\064\001\001\000\016\017" +
    "\132\020\057\023\073\024\055\025\056\027\064\001\001" +
    "\000\016\017\131\020\057\023\073\024\055\025\056\027" +
    "\064\001\001\000\016\017\130\020\057\023\073\024\055" +
    "\025\056\027\064\001\001\000\016\017\127\020\057\023" +
    "\073\024\055\025\056\027\064\001\001\000\016\017\126" +
    "\020\057\023\073\024\055\025\056\027\064\001\001\000" +
    "\016\017\125\020\057\023\073\024\055\025\056\027\064" +
    "\001\001\000\016\017\124\020\057\023\073\024\055\025" +
    "\056\027\064\001\001\000\016\017\123\020\057\023\073" +
    "\024\055\025\056\027\064\001\001\000\016\017\122\020" +
    "\057\023\073\024\055\025\056\027\064\001\001\000\016" +
    "\017\121\020\057\023\073\024\055\025\056\027\064\001" +
    "\001\000\016\017\120\020\057\023\073\024\055\025\056" +
    "\027\064\001\001\000\016\017\117\020\057\023\073\024" +
    "\055\025\056\027\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\017\077\020\057\023" +
    "\073\024\055\025\056\027\064\033\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\143\001\001\000" +
    "\002\001\001\000\004\015\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\150\020\057\023\073\024" +
    "\055\025\056\027\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\156\020\057\023\073\024\055\025\056" +
    "\027\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\162\020\057\023\073\024\055\025\056\027\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\017\077\020\057\023\073\024\055\025\056" +
    "\027\064\033\175\001\001\000\004\014\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\173\020\057\023\073\024\055\025\056\027\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\200\020" +
    "\057\023\073\024\055\025\056\027\064\001\001\000\002" +
    "\001\001\000\004\015\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\205\020\057\023\073\024\055" +
    "\025\056\027\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\216\020\057\023\073\024\055\025\056" +
    "\027\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}



    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token;
        String line = String.format("%d:%d error:Unexpected token %s", tok.getLine() + 1, tok.getCol() + 1, tok.value);
        throw new Error(line);
    }
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        /*System.out.println(m);*/
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        return;
        /*System.exit(1);*/
    }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 83. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Program start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Program> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // program ::= uselist funclist 
            {
                Program RESULT = null;
                int usleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int usright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                List<Use> us = CUP$parser$stack.elementAt(CUP$parser$top-1).<List<Use>> value();
                int flleft = CUP$parser$stack.peek().left;
                int flright = CUP$parser$stack.peek().right;
                List<Function> fl = CUP$parser$stack.peek().<List<Function>> value();
                RESULT = new Program(us,fl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // uselist ::= uselist useprod 
            {
                List<Use> RESULT = null;
                int ulleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ulright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                List<Use> ul = CUP$parser$stack.elementAt(CUP$parser$top-1).<List<Use>> value();
                int upleft = CUP$parser$stack.peek().left;
                int upright = CUP$parser$stack.peek().right;
                Use up = CUP$parser$stack.peek().<Use> value();
                ul.add(up); RESULT = ul;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("uselist",1, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // uselist ::= 
            {
                List<Use> RESULT = null;
                RESULT = new ArrayList<Use>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("uselist",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // useprod ::= USE ID 
            {
                Use RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                
					 RESULT = new Use( id, idleft+1 ,idright+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("useprod",3, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // useprod ::= USE ID SEMI 
            {
                Use RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-1).<String> value();
                RESULT = new Use( id, idleft+1 ,idright+1 ); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("useprod",3, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // funclist ::= funclist func 
            {
                List<Function> RESULT = null;
                int flleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int flright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                List<Function> fl = CUP$parser$stack.elementAt(CUP$parser$top-1).<List<Function>> value();
                int fleft = CUP$parser$stack.peek().left;
                int fright = CUP$parser$stack.peek().right;
                Function f = CUP$parser$stack.peek().<Function> value();
                 fl.add(f); RESULT = fl;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("funclist",2, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // funclist ::= func 
            {
                List<Function> RESULT = null;
                int fleft = CUP$parser$stack.peek().left;
                int fright = CUP$parser$stack.peek().right;
                Function f = CUP$parser$stack.peek().<Function> value();
                 List<Function> ret = new ArrayList<Function>(); ret.add(f);
				        RESULT = ret; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("funclist",2, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // func ::= ID LPAREN arglist RPAREN funtype block 
            {
                Function RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-5).<String> value();
                int alleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int alright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                List<Decl> al = CUP$parser$stack.elementAt(CUP$parser$top-3).<List<Decl>> value();
                int ftleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ftright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Tuple ft = CUP$parser$stack.elementAt(CUP$parser$top-1).<Tuple> value();
                int blleft = CUP$parser$stack.peek().left;
                int blright = CUP$parser$stack.peek().right;
                Block bl = CUP$parser$stack.peek().<Block> value();
                  RESULT = new Function(new IDExpr(id,idleft+1,idright+1), al, ft, bl.getBody(), idleft+1, idright+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("func",16, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // arglist ::= arglist COMMA arg 
            {
                List<Decl> RESULT = null;
                int arglleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int arglright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                List<Decl> argl = CUP$parser$stack.elementAt(CUP$parser$top-2).<List<Decl>> value();
                int aleft = CUP$parser$stack.peek().left;
                int aright = CUP$parser$stack.peek().right;
                Decl a = CUP$parser$stack.peek().<Decl> value();
                 argl.add(a); RESULT = argl; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // arglist ::= arg 
            {
                List<Decl> RESULT = null;
                int aleft = CUP$parser$stack.peek().left;
                int aright = CUP$parser$stack.peek().right;
                Decl a = CUP$parser$stack.peek().<Decl> value();
                 List<Decl> ret = new ArrayList<Decl>();
						ret.add(a); RESULT = ret ;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",4, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // arglist ::= 
            {
                List<Decl> RESULT = null;
                 RESULT = new ArrayList<Decl>();
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",4, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // arg ::= ID COLON vartype 
            {
                Decl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int vtleft = CUP$parser$stack.peek().left;
                int vtright = CUP$parser$stack.peek().right;
                Type vt = CUP$parser$stack.peek().<Type> value();
                 RESULT = new Decl(new IDExpr(id,idleft+1,idright+1), vt, idleft+1, idright+1);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arg",6, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // funtype ::= COLON vartype 
            {
                Tuple RESULT = null;
                int vtleft = CUP$parser$stack.peek().left;
                int vtright = CUP$parser$stack.peek().right;
                Type vt = CUP$parser$stack.peek().<Type> value();
                 Tuple ret = new Tuple(new ArrayList<Type>()); ret.add(vt); RESULT = ret; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("funtype",8, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // funtype ::= funtype COMMA vartype 
            {
                Tuple RESULT = null;
                int ftleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ftright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Tuple ft = CUP$parser$stack.elementAt(CUP$parser$top-2).<Tuple> value();
                int vtleft = CUP$parser$stack.peek().left;
                int vtright = CUP$parser$stack.peek().right;
                Type vt = CUP$parser$stack.peek().<Type> value();
                 ft.add(vt); RESULT = ft; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("funtype",8, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // funtype ::= 
            {
                Tuple RESULT = null;
                 List<Type> ret = new ArrayList<Type>();
					 	RESULT = new Tuple(ret); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("funtype",8, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // vartype ::= INT 
            {
                Type RESULT = null;
                 RESULT = new Type("int"); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("vartype",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // vartype ::= BOOL 
            {
                Type RESULT = null;
                 RESULT = new Type("bool"); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("vartype",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // vartype ::= vartype LBRACKET RBRACKET 
            {
                Type RESULT = null;
                int vtleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int vtright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type vt = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                 vt.addDepth(); RESULT = vt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("vartype",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // block ::= LBRACE stmtlist retop RBRACE 
            {
                Block RESULT = null;
                int xleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int xright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Object x = CUP$parser$stack.elementAt(CUP$parser$top-3).<Object> value();
                int slleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int slright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                List<Stmt> sl = CUP$parser$stack.elementAt(CUP$parser$top-2).<List<Stmt>> value();
                int retleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int retright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnStmt ret = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnStmt> value();
                 List<Stmt> retlist = new ArrayList<Stmt>();
					   for (Stmt s : sl){ retlist.add(s);}
					   retlist.add(ret); 
					   RESULT = new Block(retlist, xleft+1,xright+1);  
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",11, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // stmtlist ::= stmtlist stmt 
            {
                List<Stmt> RESULT = null;
                int stmlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int stmlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                List<Stmt> stml = CUP$parser$stack.elementAt(CUP$parser$top-1).<List<Stmt>> value();
                int stmleft = CUP$parser$stack.peek().left;
                int stmright = CUP$parser$stack.peek().right;
                Stmt stm = CUP$parser$stack.peek().<Stmt> value();
                 stml.add(stm); RESULT = stml; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtlist",24, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // stmtlist ::= stmtlist stmt SEMI 
            {
                List<Stmt> RESULT = null;
                int stmlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int stmlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                List<Stmt> stml = CUP$parser$stack.elementAt(CUP$parser$top-2).<List<Stmt>> value();
                int stmleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int stmright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Stmt stm = CUP$parser$stack.elementAt(CUP$parser$top-1).<Stmt> value();
                 stml.add(stm); RESULT = stml; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtlist",24, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // stmtlist ::= 
            {
                List<Stmt> RESULT = null;
                 RESULT = new ArrayList<Stmt>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtlist",24, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // stmt ::= ifblock 
            {
                Stmt RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                IfStmt s = CUP$parser$stack.peek().<IfStmt> value();
                 RESULT = s; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // stmt ::= ifelseblock 
            {
                Stmt RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                IfElseStmt s = CUP$parser$stack.peek().<IfElseStmt> value();
                 RESULT = s; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // stmt ::= WHILE LPAREN expr RPAREN block 
            {
                Stmt RESULT = null;
                int condleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int condright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr cond = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int blkleft = CUP$parser$stack.peek().left;
                int blkright = CUP$parser$stack.peek().right;
                Block blk = CUP$parser$stack.peek().<Block> value();
                 RESULT = new WhileStmt(cond,blk.getBody(), condleft+1, condright+1);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",26, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // stmt ::= ID LPAREN idlist RPAREN 
            {
                Stmt RESULT = null;
                int xleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int xright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String x = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int idlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> idl = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new ProcCall(new IDExpr(x, xleft+1, xright+1), idl, xleft+1, xright+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",26, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // stmt ::= decl 
            {
                Stmt RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Decl s = CUP$parser$stack.peek().<Decl> value();
                 RESULT = s; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // stmt ::= declassign 
            {
                Stmt RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                DeclAssign s = CUP$parser$stack.peek().<DeclAssign> value();
                 RESULT = s; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // stmt ::= ass 
            {
                Stmt RESULT = null;
                int aleft = CUP$parser$stack.peek().left;
                int aright = CUP$parser$stack.peek().right;
                Stmt a = CUP$parser$stack.peek().<Stmt> value();
                 RESULT = a; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // stmt ::= block 
            {
                Stmt RESULT = null;
                int blleft = CUP$parser$stack.peek().left;
                int blright = CUP$parser$stack.peek().right;
                Block bl = CUP$parser$stack.peek().<Block> value();
                 RESULT = bl; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // idlist ::= expr 
            {
                ArrayList<Expr> RESULT = null;
                int exp1left = CUP$parser$stack.peek().left;
                int exp1right = CUP$parser$stack.peek().right;
                Expr exp1 = CUP$parser$stack.peek().<Expr> value();
                 ArrayList<Expr> retlist = new ArrayList<Expr>(); retlist.add(exp1); RESULT = retlist; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("idlist",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // idlist ::= expr COMMA idlist 
            {
                ArrayList<Expr> RESULT = null;
                int exp1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int exp1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr exp1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int idlleft = CUP$parser$stack.peek().left;
                int idlright = CUP$parser$stack.peek().right;
                ArrayList<Expr> idl = CUP$parser$stack.peek().<ArrayList<Expr>> value();
                 idl.add(0, exp1); RESULT = idl; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("idlist",25, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // idlist ::= 
            {
                ArrayList<Expr> RESULT = null;
                 RESULT = new ArrayList<Expr>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("idlist",25, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // ifblock ::= IF LPAREN expr RPAREN block 
            {
                IfStmt RESULT = null;
                int condleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int condright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr cond = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Block b = CUP$parser$stack.peek().<Block> value();
                 RESULT = new IfStmt(cond, b.getBody(), condleft+1,condright+1);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("ifblock",28, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // ifelseblock ::= IF LPAREN expr RPAREN block ELSE block 
            {
                IfElseStmt RESULT = null;
                int condleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int condright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Expr cond = CUP$parser$stack.elementAt(CUP$parser$top-4).<Expr> value();
                int ibleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ibright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Block ib = CUP$parser$stack.elementAt(CUP$parser$top-2).<Block> value();
                int ebleft = CUP$parser$stack.peek().left;
                int ebright = CUP$parser$stack.peek().right;
                Block eb = CUP$parser$stack.peek().<Block> value();
                 RESULT = new IfElseStmt( cond, ib.getBody(), eb.getBody(),condleft+1,condright+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("ifelseblock",29, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // decl ::= decllist 
            {
                Decl RESULT = null;
                int dlleft = CUP$parser$stack.peek().left;
                int dlright = CUP$parser$stack.peek().right;
                List<Decl> dl = CUP$parser$stack.peek().<List<Decl>> value();
                 RESULT = dl.get(0); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",7, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // declassign ::= decllist EQ expr 
            {
                DeclAssign RESULT = null;
                int dclleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int dclright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                List<Decl> dcl = CUP$parser$stack.elementAt(CUP$parser$top-2).<List<Decl>> value();
                int exp1left = CUP$parser$stack.peek().left;
                int exp1right = CUP$parser$stack.peek().right;
                Expr exp1 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new DeclAssign( dcl , exp1 ,dclleft+1,dclright+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("declassign",27, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // decllist ::= UNDERSCORE 
            {
                List<Decl> RESULT = null;
                int uleft = CUP$parser$stack.peek().left;
                int uright = CUP$parser$stack.peek().right;
                Object u = CUP$parser$stack.peek().<Object> value();
                 List<Decl> ret = new ArrayList<Decl>();
					   ret.add(new Decl(new IDExpr("_", uleft+1, uright+1), new Type("underscore"),uleft,uright ));
					   RESULT = ret; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decllist",5, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // decllist ::= ID COLON vartype_init 
            {
                List<Decl> RESULT = null;
                int xleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int xright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String x = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int vtleft = CUP$parser$stack.peek().left;
                int vtright = CUP$parser$stack.peek().right;
                Decl vt = CUP$parser$stack.peek().<Decl> value();
                 List<Decl> ret = new ArrayList<Decl>();
					  IDExpr newID = new IDExpr(x,xleft+1,xright+1);
					  vt.setID(newID);
					  ret.add(vt);
					  RESULT = ret;  
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decllist",5, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // decllist ::= decllist COMMA UNDERSCORE 
            {
                List<Decl> RESULT = null;
                int dclleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int dclright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                List<Decl> dcl = CUP$parser$stack.elementAt(CUP$parser$top-2).<List<Decl>> value();
                int uleft = CUP$parser$stack.peek().left;
                int uright = CUP$parser$stack.peek().right;
                Object u = CUP$parser$stack.peek().<Object> value();
                 dcl.add(new Decl(new IDExpr("_", uleft+1, uright+1), new Type("underscore"),dclleft+1,dclright+1));
					  RESULT = dcl; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decllist",5, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // decllist ::= decllist COMMA ID COLON vartype_init 
            {
                List<Decl> RESULT = null;
                int dclleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int dclright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                List<Decl> dcl = CUP$parser$stack.elementAt(CUP$parser$top-4).<List<Decl>> value();
                int xleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int xright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String x = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int vtleft = CUP$parser$stack.peek().left;
                int vtright = CUP$parser$stack.peek().right;
                Decl vt = CUP$parser$stack.peek().<Decl> value();
                 List<Decl> ret = new ArrayList<Decl>();
					  IDExpr newID = new IDExpr(x,xleft+1,xright+1);
					  vt.setID(newID);
					  for (Decl v : dcl){
					    ret.add(v);}
					  ret.add(vt);
					  RESULT = ret;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decllist",5, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // ass ::= var EQ expr 
            {
                Stmt RESULT = null;
                int xleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int xright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrExpr x = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrExpr> value();
                int exp1left = CUP$parser$stack.peek().left;
                int exp1right = CUP$parser$stack.peek().right;
                Expr exp1 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new Assign(x, exp1, xleft+1, xright+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("ass",23, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // vartype_init ::= INT 
            {
                Decl RESULT = null;
                int xleft = CUP$parser$stack.peek().left;
                int xright = CUP$parser$stack.peek().right;
                Object x = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Decl(new IDExpr("int",xleft+1,xright+1), new Type("int"), new ArrayList<Expr>(), xleft+1, xright+1);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("vartype_init",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // vartype_init ::= BOOL 
            {
                Decl RESULT = null;
                int xleft = CUP$parser$stack.peek().left;
                int xright = CUP$parser$stack.peek().right;
                Object x = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Decl(new IDExpr("bool",xleft+1,xright+1), new Type("bool"), new ArrayList<Expr>(), xleft+1, xright+1);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("vartype_init",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // vartype_init ::= vartype_init LBRACKET RBRACKET 
            {
                Decl RESULT = null;
                int vtleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int vtright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Decl vt = CUP$parser$stack.elementAt(CUP$parser$top-2).<Decl> value();
                 vt.getType().addDepth(); RESULT = vt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("vartype_init",10, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // vartype_init ::= vartype_init LBRACKET expr RBRACKET 
            {
                Decl RESULT = null;
                int vtleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int vtright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Decl vt = CUP$parser$stack.elementAt(CUP$parser$top-3).<Decl> value();
                int expleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int expright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr exp = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 vt.getType().addDepth(); 
                    if(vt.getType().getDepth() > vt.getAccesses().size()){
                        Error e  = new Error();
                        parser.report_error("Syntax error",e);
                    } else{
                      vt.addAccess(exp);  
                    }  RESULT = vt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("vartype_init",10, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // var ::= ID 
            {
                ArrExpr RESULT = null;
                int xleft = CUP$parser$stack.peek().left;
                int xright = CUP$parser$stack.peek().right;
                String x = CUP$parser$stack.peek().<String> value();
                 RESULT = new ArrExpr(new IDExpr(x,xleft+1,xright+1), xleft+1, xright+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // var ::= var LBRACKET RBRACKET 
            {
                ArrExpr RESULT = null;
                int vtleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int vtright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrExpr vt = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrExpr> value();
                 vt.addDepth(); RESULT = vt;  
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // var ::= var LBRACKET expr RBRACKET 
            {
                ArrExpr RESULT = null;
                int vtleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int vtright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrExpr vt = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrExpr> value();
                int expleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int expright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr exp = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 vt.addDepth(); 
                    if(vt.getDepth() > vt.getAccesses().size()){
                        Error e  = new Error();
                        parser.report_error("syntax error", e);
                    }
                    else{ vt.add(exp); RESULT = vt; }
                 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("var",14, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // retop ::= RETURN idlist 
            {
                ReturnStmt RESULT = null;
                int elleft = CUP$parser$stack.peek().left;
                int elright = CUP$parser$stack.peek().right;
                ArrayList<Expr> el = CUP$parser$stack.peek().<ArrayList<Expr>> value();
                 RESULT = new ReturnStmt(el,elleft+1,elright+1);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("retop",30, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // retop ::= RETURN idlist SEMI 
            {
                ReturnStmt RESULT = null;
                int elleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int elright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> el = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new ReturnStmt(el,elleft+1,elright+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("retop",30, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // retop ::= 
            {
                ReturnStmt RESULT = null;
                 RESULT = new ReturnStmt(null, 0,0);  
                CUP$parser$result = parser.getSymbolFactory().newSymbol("retop",30, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // expr ::= INTEGER 
            {
                Expr RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Integer i = CUP$parser$stack.peek().<Integer> value();
                 RESULT = new NumExpr(i,ileft+1,iright+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // expr ::= CHARACTER 
            {
                Expr RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                String c = CUP$parser$stack.peek().<String> value();
                 RESULT = new NumExpr(c.charAt(0), cleft+1, cright+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // expr ::= TRUE 
            {
                Expr RESULT = null;
                int vleft = CUP$parser$stack.peek().left;
                int vright = CUP$parser$stack.peek().right;
                Boolean v = CUP$parser$stack.peek().<Boolean> value();
                 RESULT = new BoolExpr(v,vleft+1,vright+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // expr ::= FALSE 
            {
                Expr RESULT = null;
                int vleft = CUP$parser$stack.peek().left;
                int vright = CUP$parser$stack.peek().right;
                Boolean v = CUP$parser$stack.peek().<Boolean> value();
                 RESULT = new BoolExpr(v,vleft+1,vright+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // expr ::= LENGTH LPAREN expr RPAREN 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new Length(e1,e1left+1,e1right+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // expr ::= LPAREN expr RPAREN 
            {
                Expr RESULT = null;
                int exleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int exright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr ex = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = ex;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // expr ::= var 
            {
                Expr RESULT = null;
                int vtleft = CUP$parser$stack.peek().left;
                int vtright = CUP$parser$stack.peek().right;
                ArrExpr vt = CUP$parser$stack.peek().<ArrExpr> value();
                 RESULT = vt ;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // expr ::= binaryexpr 
            {
                Expr RESULT = null;
                int beleft = CUP$parser$stack.peek().left;
                int beright = CUP$parser$stack.peek().right;
                BinaryExpr be = CUP$parser$stack.peek().<BinaryExpr> value();
                 RESULT = be; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // expr ::= unaryexpr 
            {
                Expr RESULT = null;
                int neleft = CUP$parser$stack.peek().left;
                int neright = CUP$parser$stack.peek().right;
                UnaryExpr ne = CUP$parser$stack.peek().<UnaryExpr> value();
                 RESULT = ne; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // expr ::= funcall 
            {
                Expr RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunCall fc = CUP$parser$stack.peek().<FunCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // expr ::= tuple 
            {
                Expr RESULT = null;
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                ArrLiteralExpr tl = CUP$parser$stack.peek().<ArrLiteralExpr> value();
                 RESULT = tl;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // funcall ::= ID LPAREN idlist RPAREN 
            {
                FunCall RESULT = null;
                int xleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int xright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String x = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int elleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int elright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> el = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new FunCall( new IDExpr(x,xleft+1,xright+1), el,xleft+1,xright+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("funcall",19, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // tuple ::= LBRACE idlist RBRACE 
            {
                ArrLiteralExpr RESULT = null;
                int vtleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vtright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> vt = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new ArrLiteralExpr(vt, vtleft+1, vtright+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",21, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // tuple ::= STRING 
            {
                ArrLiteralExpr RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                String s = CUP$parser$stack.peek().<String> value();
                 RESULT = new ArrLiteralExpr(s, sleft+1, sright+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // tuple ::= tuple LBRACKET expr RBRACKET 
            {
                ArrLiteralExpr RESULT = null;
                int tpleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int tpright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrLiteralExpr tp = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrLiteralExpr> value();
                int expleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int expright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr exp = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 tp.addAccess(exp); RESULT = tp; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",21, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // binaryexpr ::= expr PLUS expr 
            {
                BinaryExpr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2,BinaryOp.PLUS,e1left+1,e1right+1,e2left+1,e2right+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // binaryexpr ::= expr MINUS expr 
            {
                BinaryExpr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2,BinaryOp.MINUS,e1left+1,e1right+1,e2left+1,e2right+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // binaryexpr ::= expr TIMES expr 
            {
                BinaryExpr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2,BinaryOp.TIMES,e1left+1,e1right+1,e2left+1,e2right+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // binaryexpr ::= expr DIV expr 
            {
                BinaryExpr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2,BinaryOp.DIV,e1left+1,e1right+1,e2left+1,e2right+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // binaryexpr ::= expr MOD expr 
            {
                BinaryExpr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2,BinaryOp.MOD,e1left+1,e1right+1,e2left+1,e2right+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // binaryexpr ::= expr LANGLE expr 
            {
                BinaryExpr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2,BinaryOp.LT,e1left+1,e1right+1,e2left+1,e2right+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // binaryexpr ::= expr RANGLE expr 
            {
                BinaryExpr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2,BinaryOp.GT,e1left+1,e1right+1,e2left+1,e2right+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // binaryexpr ::= expr LEQ expr 
            {
                BinaryExpr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2,BinaryOp.LEQ,e1left+1,e1right+1,e2left+1,e2right+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // binaryexpr ::= expr GEQ expr 
            {
                BinaryExpr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2,BinaryOp.GEQ,e1left+1,e1right+1,e2left+1,e2right+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // binaryexpr ::= expr EQEQ expr 
            {
                BinaryExpr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2,BinaryOp.EQEQ,e1left+1,e1right+1,e2left+1,e2right+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // binaryexpr ::= expr NEQ expr 
            {
                BinaryExpr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2,BinaryOp.NEQ,e1left+1,e1right+1,e2left+1,e2right+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // binaryexpr ::= expr AND expr 
            {
                BinaryExpr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2,BinaryOp.AND,e1left+1,e1right+1,e2left+1,e2right+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // binaryexpr ::= expr OR expr 
            {
                BinaryExpr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2,BinaryOp.OR,e1left+1,e1right+1,e2left+1,e2right+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // binaryexpr ::= expr HIGHMUL expr 
            {
                BinaryExpr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryExpr(e1, e2,BinaryOp.HIGHMUL,e1left+1,e1right+1,e2left+1,e2right+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryexpr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // unaryexpr ::= MINUS expr 
            {
                UnaryExpr RESULT = null;
                int e1left = CUP$parser$stack.peek().left;
                int e1right = CUP$parser$stack.peek().right;
                Expr e1 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryExpr(UnaryOp.ARITHNEG, e1,e1left+1,e1right+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",18, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // unaryexpr ::= NOT expr 
            {
                UnaryExpr RESULT = null;
                int e1left = CUP$parser$stack.peek().left;
                int e1right = CUP$parser$stack.peek().right;
                Expr e1 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryExpr(UnaryOp.BOOLNEG, e1,e1left+1,e1right+1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",18, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
