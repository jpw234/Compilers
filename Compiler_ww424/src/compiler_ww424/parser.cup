package compiler_ww424;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import compiler_ww424.Lexer.Token;
import java.util.ArrayList;
import java.util.List;

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:

  private boolean is_interface = false;
  
  public void setState(Boolean b) { is_interface = b; }
  public boolean getState() { return is_interface; }
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token;
        String line = String.format("%d:%d error:Unexpected token %s", tok.getLine() + 1, tok.getCol() + 1, tok.value);
        throw new Error(line);
    }
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        /*System.out.println(m);*/
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        return;
        /*System.exit(1);*/
    }
:};

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */




/////////////////////////////////////////////////////////////////////////////
terminal String ID;
terminal String STRING;
terminal String CHARACTER;
terminal Integer INTEGER;
terminal INT, BOOL;
terminal Boolean TRUE, FALSE;
terminal IF, ELSE, WHILE, RETURN, USE, LENGTH, PLUS, MINUS, TIMES,
  DIV, MOD, NOT, LANGLE, LEQ, RANGLE, GEQ, EQEQ, AND, OR, EQ, NEQ,
  LBRACKET, RBRACKET, LPAREN, RPAREN, LBRACE, RBRACE,
  COLON, COMMA, SEMI, UNDERSCORE,HIGHMUL,UMINUS;
  

nonterminal Program program;
nonterminal List<Use> uselist;
nonterminal List<Function> funclist;
nonterminal Use useprod;
nonterminal List<Decl> arglist,decllist;
nonterminal Decl arg,decl;
nonterminal Tuple funtype ;
nonterminal Decl vartype_init_tmp,vartype_init;
nonterminal Block block;
nonterminal Type vartype;
nonterminal Expr expr;
nonterminal ArrExpr var,var_tmp;
nonterminal Function func;
nonterminal BinaryExpr binaryexpr;  
nonterminal UnaryExpr unaryexpr;
nonterminal FunCall funcall;
nonterminal List<Expr> exprlist; 
nonterminal ArrLiteralExpr tuple; 
nonterminal Assign assignment;
nonterminal Stmt ass;
nonterminal List<Stmt> stmtlist;
nonterminal ArrayList<Expr> idlist;
nonterminal Stmt stmt;
nonterminal DeclAssign declassign;
nonterminal IfStmt ifblock;
nonterminal IfElseStmt ifelseblock;
nonterminal ReturnStmt retop;

precedence left OR;
precedence left AND;
precedence left EQ, LANGLE, RANGLE, LEQ, GEQ,EQEQ,NEQ;
precedence left PLUS, MINUS;
precedence left HIGHMUL;
precedence left TIMES, DIV, MOD; 
precedence left NOT,UMINUS;
precedence nonassoc IF;
precedence nonassoc ELSE;

// Add more nonterminals here...

start with program;

program             ::= uselist:us funclist:fl                {:if(!parser.getState()) RESULT = new Program(us,fl);
                                        else RESULT = new Program(new ArrayList<Use>(), fl); :}
             ;
uselist             ::= uselist:ul useprod:up                 {:ul.add(up); RESULT = ul;:}
             |                              {:RESULT = new ArrayList<Use>(); :}
                    ;
useprod             ::= USE ID:id                       
          {:
           RESULT = new Use( id, idleft+1 ,idright+1); :}
             | USE ID:id SEMI                     
                     {:RESULT = new Use( id, idleft+1 ,idright+1 ); :};
funclist            ::= funclist: fl func:f                       {: fl.add(f); RESULT = fl;:}
             | func:f
             {: List<Function> ret = new ArrayList<Function>(); ret.add(f);
                RESULT = ret; :}
                    ;
func                ::= ID:id LPAREN arglist:al RPAREN funtype:ft block:bl  
          {:  if(parser.getState()) parser.report_error("Syntax error", new Error("interface declarations shouldn't have bodies"));
              RESULT = new Function(new IDExpr(id,idleft+1,idright+1), al, ft, bl.getBody(), idleft+1, idright+1); :}
          |   ID:id LPAREN arglist:al RPAREN funtype:ft
          {:  if(!parser.getState()) parser.report_error("Syntax error", new Error("function declarations shouldn't be empty"));
              RESULT = new Function(new IDExpr("*"+id,idleft+1,idright+1), al, ft, idleft+1, idright+1); :}
          ;
          
//argument list
arglist             ::= arglist:argl COMMA arg: a               {: argl.add(a); RESULT = argl; :} 
             | arg:a                          
             {: List<Decl> ret = new ArrayList<Decl>();
            ret.add(a); RESULT = ret ;:}
             |                                
             {: RESULT = new ArrayList<Decl>();:}         
             ;
//argument
arg             ::= ID: id COLON vartype: vt                
          {: RESULT = new Decl(new IDExpr(id,idleft+1,idright+1), vt, idleft+1, idright+1);:}
            ;
funtype             ::= COLON vartype:vt                  
          {: Tuple ret = new Tuple(new ArrayList<Type>()); ret.add(vt); RESULT = ret; :}
                    | funtype:ft COMMA vartype:vt               {: ft.add(vt); RESULT = ft; :}
                    |                               
                    {: List<Type> ret = new ArrayList<Type>();
            RESULT = new Tuple(ret); :}
                    ;
//function declaration variable type
vartype        ::=   INT                      {: RESULT = new Type("int"); :}
                   | BOOL                         {: RESULT = new Type("bool"); :}
                   | vartype:vt LBRACKET RBRACKET           {: vt.addDepth(); RESULT = vt; :}
                   ;
block               ::=  LBRACE:x stmtlist:sl retop:ret RBRACE          
          {: List<Stmt> retlist = new ArrayList<Stmt>();
             for (Stmt s : sl){ retlist.add(s);}
             retlist.add(ret); 
             RESULT = new Block(retlist, xleft+1,xright+1);  :}
                    ;
stmtlist            ::=  stmtlist:stml stmt:stm                   
          {: stml.add(stm); RESULT = stml; :}
                    | stmtlist:stml stmt:stm SEMI               
                    {: stml.add(stm); RESULT = stml; :}
                    |                                 
                    {: RESULT = new ArrayList<Stmt>(); :}
                    ;
stmt                ::=   ifblock:s                     {: RESULT = s; :}
                    | ifelseblock:s                       {: RESULT = s; :}
                    | WHILE LPAREN expr:cond RPAREN block:blk           {: RESULT = new WhileStmt(cond,blk.getBody(), condleft+1, condright+1);:}
                    | ID:x LPAREN idlist:idl RPAREN             {: RESULT = new ProcCall(new IDExpr(x, xleft+1, xright+1), idl, xleft+1, xright+1); :}
                    | decl:s                        {: RESULT = s; :}
                    | declassign:s                      {: RESULT = s; :}
                    | ass:a                         {: RESULT = a; :}
                    | block:bl                          {: RESULT = bl; :}
                    ;
idlist              ::= expr :exp1                      {: ArrayList<Expr> retlist = new ArrayList<Expr>(); retlist.add(exp1); RESULT = retlist; :}
            | expr:exp1 COMMA idlist:idl              {: idl.add(0, exp1); RESULT = idl; :}
            |                             {: RESULT = new ArrayList<Expr>(); :}
                    ;

ifblock             ::=  IF LPAREN expr:cond RPAREN block:b         
          {: RESULT = new IfStmt(cond, b.getBody(), condleft+1,condright+1);:}
          ;
  
ifelseblock    ::=  IF LPAREN expr:cond RPAREN block:ib ELSE block:eb 
          {: RESULT = new IfElseStmt( cond, ib.getBody(), eb.getBody(),condleft+1,condright+1); :}
                   ;
//declaration
decl           ::=   decllist: dl                       
          {: RESULT = dl.get(0); :};
declassign     ::=  decllist:dcl EQ expr:exp1                     
          {: RESULT = new DeclAssign( dcl , exp1 ,dclleft+1,dclright+1); :}
                   ;
//declaration list
decllist       ::=   UNDERSCORE:u                     
          {: List<Decl> ret = new ArrayList<Decl>();
             ret.add(new Decl(new IDExpr("_", uleft+1, uright+1), new Type("underscore"),uleft,uright ));
             RESULT = ret; :}
                   | ID:x COLON vartype_init:vt               
                   {: List<Decl> ret = new ArrayList<Decl>();
            IDExpr newID = new IDExpr(x,xleft+1,xright+1);
            vt.setID(newID);
            ret.add(vt);
            RESULT = ret;  :}
                   | decllist:dcl COMMA UNDERSCORE:u                  
                   {: dcl.add(new Decl(new IDExpr("_", uleft+1, uright+1), new Type("underscore"),dclleft+1,dclright+1));
            RESULT = dcl; :}
                   | decllist:dcl COMMA ID:x COLON vartype_init :vt     
                   {: List<Decl> ret = new ArrayList<Decl>();
            IDExpr newID = new IDExpr(x,xleft+1,xright+1);
            vt.setID(newID);
            for (Decl v : dcl){
              ret.add(v);}
            ret.add(vt);
            RESULT = ret;:};
//assignment
ass            ::= var:x EQ expr:exp1 {: RESULT = new Assign(x, exp1, xleft+1, xright+1); :}
                   ;
//variable type w/o initialization
vartype_init  ::=  INT:x                      {: RESULT = new Decl(new IDExpr("int",xleft+1,xright+1), new Type("int"), new ArrayList<Expr>(), xleft+1, xright+1);:}
                 | BOOL:x                         {: RESULT = new Decl(new IDExpr("bool",xleft+1,xright+1), new Type("bool"), new ArrayList<Expr>(), xleft+1, xright+1);:}
                 | vartype_init:vt LBRACKET RBRACKET                {: vt.getType().addDepth(); RESULT = vt; :}
                 | vartype_init:vt LBRACKET expr:exp RBRACKET     
                 {: 
                    try{
                        if(vt.getType().getDepth() != vt.getAccesses().size()){
                          throw new ArrayInitException("Array Initialization Error");
                        }
                    }
                    catch(ArrayInitException ex){
                      System.out.println(ex.toString());
                    }
                    vt.getType().addDepth();
                    vt.addAccess(exp);  
                    RESULT = vt; :}
                 ;
//variable
var         ::=  ID:x                         {: RESULT = new ArrExpr(new IDExpr(x,xleft+1,xright+1), xleft+1, xright+1); :}
                 | var:vt LBRACKET RBRACKET               {: vt.addDepth(); RESULT = vt;  :}
                 | var:vt LBRACKET expr:exp RBRACKET            
                 {:
                    try{
                        if(vt.getDepth() != vt.getAccesses().size()){
                          throw new ArrayInitException("Array Initialization Error");
                        }
                    }
                    catch(ArrayInitException ex){
                      System.out.println(ex.toString());
                    }
                    vt.addDepth();
                    vt.add(exp);
          RESULT = vt; 
                 :}
                 ;
                   
retop          ::=  RETURN idlist:el                
          {: RESULT = new ReturnStmt(el,elleft+1,elright+1);:}
           |RETURN idlist:el SEMI             
           {: RESULT = new ReturnStmt(el,elleft+1,elright+1); :}
                   |                        {: RESULT = new ReturnStmt(null, 0,0);  :}
                   ;
expr           ::=   INTEGER:i                  {: RESULT = new NumExpr(i,ileft+1,iright+1); :}
                   | CHARACTER:c                {: RESULT = new NumExpr(c.charAt(0), cleft+1, cright+1); :}
                   | TRUE:v                   {: RESULT = new BoolExpr(v,vleft+1,vright+1); :}
                   | FALSE:v                  {: RESULT = new BoolExpr(v,vleft+1,vright+1); :}
                   | LENGTH LPAREN expr:e1 RPAREN       {: RESULT = new Length(e1,e1left+1,e1right+1); :}
                   | LPAREN expr:ex RPAREN            {: RESULT = ex;:}
                   | var:vt                       {: RESULT = vt ;:}
                   | binaryexpr:be                {: RESULT = be; :}          
                   | unaryexpr:ne               {: RESULT = ne; :}
                   | funcall:fc                 {: RESULT = fc; :}
                   | tuple:tl                 {: RESULT = tl;:}                   
          ;
funcall        ::=   ID:x LPAREN idlist:el RPAREN         {: RESULT = new FunCall( new IDExpr(x,xleft+1,xright+1), el,xleft+1,xright+1); :};
//could be tuple or string (e.g. {1,2,3} or "Hello")
tuple          ::=   LBRACE idlist:vt RBRACE          {: RESULT = new ArrLiteralExpr(vt, vtleft+1, vtright+1); :}
                   | STRING:s                                   {: RESULT = new ArrLiteralExpr(s, sleft+1, sright+1); :}
                   | tuple:tp LBRACKET expr:exp RBRACKET        {: tp.addAccess(exp); RESULT = tp; :}
                   ;
binaryexpr     ::=   expr:e1 PLUS expr:e2           {: RESULT = new BinaryExpr(e1, e2,BinaryOp.PLUS,e1left+1,e1right+1,e2left+1,e2right+1); :}
                   | expr:e1 MINUS expr:e2            {: RESULT = new BinaryExpr(e1, e2,BinaryOp.MINUS,e1left+1,e1right+1,e2left+1,e2right+1); :}
                   | expr:e1 TIMES expr:e2            {: RESULT = new BinaryExpr(e1, e2,BinaryOp.TIMES,e1left+1,e1right+1,e2left+1,e2right+1); :}
                   | expr:e1 DIV expr:e2            {: RESULT = new BinaryExpr(e1, e2,BinaryOp.DIV,e1left+1,e1right+1,e2left+1,e2right+1); :}
                   | expr:e1 MOD expr:e2            {: RESULT = new BinaryExpr(e1, e2,BinaryOp.MOD,e1left+1,e1right+1,e2left+1,e2right+1); :}
                   | expr:e1 LANGLE expr:e2           {: RESULT = new BinaryExpr(e1, e2,BinaryOp.LT,e1left+1,e1right+1,e2left+1,e2right+1); :}
                   | expr:e1 RANGLE expr:e2           {: RESULT = new BinaryExpr(e1, e2,BinaryOp.GT,e1left+1,e1right+1,e2left+1,e2right+1); :}
                   | expr:e1 LEQ expr:e2            {: RESULT = new BinaryExpr(e1, e2,BinaryOp.LEQ,e1left+1,e1right+1,e2left+1,e2right+1); :}
                   | expr:e1 GEQ expr:e2            {: RESULT = new BinaryExpr(e1, e2,BinaryOp.GEQ,e1left+1,e1right+1,e2left+1,e2right+1); :}
                   | expr:e1 EQEQ expr:e2           {: RESULT = new BinaryExpr(e1, e2,BinaryOp.EQEQ,e1left+1,e1right+1,e2left+1,e2right+1); :}
                   | expr:e1 NEQ expr:e2              {: RESULT = new BinaryExpr(e1, e2,BinaryOp.NEQ,e1left+1,e1right+1,e2left+1,e2right+1); :}
                   | expr:e1 AND expr:e2            {: RESULT = new BinaryExpr(e1, e2,BinaryOp.AND,e1left+1,e1right+1,e2left+1,e2right+1); :}
                   | expr:e1 OR expr:e2             {: RESULT = new BinaryExpr(e1, e2,BinaryOp.OR,e1left+1,e1right+1,e2left+1,e2right+1); :}
                   | expr:e1 HIGHMUL expr:e2          {: RESULT = new BinaryExpr(e1, e2,BinaryOp.HIGHMUL,e1left+1,e1right+1,e2left+1,e2right+1); :}
                   ;
unaryexpr      ::=  MINUS expr:e1               {: RESULT = new UnaryExpr(UnaryOp.ARITHNEG, e1,e1left+1,e1right+1); :}
        %prec UMINUS                  
                | NOT expr:e1                   {: RESULT = new UnaryExpr(UnaryOp.BOOLNEG, e1,e1left+1,e1right+1); :}
                ;                  